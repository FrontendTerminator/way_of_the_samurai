[{"C:\\IT\\way_of_the_samurai\\my-app\\src\\App.tsx":"1","C:\\IT\\way_of_the_samurai\\my-app\\src\\reportWebVitals.ts":"2","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Header\\header.tsx":"3","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Profile\\Profile.tsx":"4","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Profile\\MyPosts\\MyPosts.tsx":"5","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx":"6","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Dialogs\\Dialogs.tsx":"7","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Navbar\\Navbar.tsx":"8","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Profile\\MyPosts\\ProfileInfo\\ProfileInfo.tsx":"9","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Dialogs\\DialogItem\\DialogItem.tsx":"10","C:\\IT\\way_of_the_samurai\\my-app\\src\\index.tsx":"11","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Dialogs\\Message\\Message.tsx":"12","C:\\IT\\way_of_the_samurai\\my-app\\src\\redux\\Profile-reducer.tsx":"13","C:\\IT\\way_of_the_samurai\\my-app\\src\\redux\\redux-store.tsx":"14","C:\\IT\\way_of_the_samurai\\my-app\\src\\redux\\Sidebar-reducer.tsx":"15","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx":"16","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Dialogs\\DialogsContainer.tsx":"17","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Navbar\\NavbarContainer.tsx":"18","C:\\IT\\way_of_the_samurai\\my-app\\src\\StoreContext.tsx":"19","C:\\IT\\way_of_the_samurai\\my-app\\src\\redux\\Dialogs-reducer.tsx":"20","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Users\\users.tsx":"21","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Users\\UsersContainer.tsx":"22","C:\\IT\\way_of_the_samurai\\my-app\\src\\redux\\Users-reducer.tsx":"23","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Profile\\ProfileContainer.tsx":"24","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Common\\Preloader\\Preloader.tsx":"25","C:\\IT\\way_of_the_samurai\\my-app\\src\\redux\\Auth-reducer.tsx":"26","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Header\\headerContainer.tsx":"27","C:\\IT\\way_of_the_samurai\\my-app\\src\\api\\api.ts":"28","C:\\IT\\way_of_the_samurai\\my-app\\src\\hoc\\withAuthRedirect.tsx":"29","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Profile\\MyPosts\\ProfileInfo\\ProfileStatus.tsx":"30","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Login\\Login.tsx":"31","C:\\IT\\way_of_the_samurai\\my-app\\src\\utils\\validators\\validators.ts":"32","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Common\\FormsControls\\FormsControls.tsx":"33","C:\\IT\\way_of_the_samurai\\my-app\\src\\redux\\App-reducer.tsx":"34","C:\\IT\\way_of_the_samurai\\my-app\\src\\redux\\users-selectors.ts":"35","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Profile\\MyPosts\\ProfileInfo\\ProfileStatusWithHooks.tsx":"36","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Users\\user.tsx":"37"},{"size":2238,"mtime":1618052230421,"results":"38","hashOfConfig":"39"},{"size":425,"mtime":1607600916665,"results":"40","hashOfConfig":"39"},{"size":768,"mtime":1616076598970,"results":"41","hashOfConfig":"39"},{"size":709,"mtime":1615803887617,"results":"42","hashOfConfig":"39"},{"size":1873,"mtime":1617893811901,"results":"43","hashOfConfig":"39"},{"size":518,"mtime":1611404191200,"results":"44","hashOfConfig":"39"},{"size":2176,"mtime":1615902684644,"results":"45","hashOfConfig":"39"},{"size":2193,"mtime":1612523202588,"results":"46","hashOfConfig":"39"},{"size":1235,"mtime":1617018872671,"results":"47","hashOfConfig":"39"},{"size":443,"mtime":1611419467941,"results":"48","hashOfConfig":"39"},{"size":755,"mtime":1618052328835,"results":"49","hashOfConfig":"39"},{"size":327,"mtime":1611419467803,"results":"50","hashOfConfig":"39"},{"size":3625,"mtime":1617998501570,"results":"51","hashOfConfig":"39"},{"size":1268,"mtime":1616162407314,"results":"52","hashOfConfig":"39"},{"size":412,"mtime":1611428281080,"results":"53","hashOfConfig":"39"},{"size":761,"mtime":1615893965131,"results":"54","hashOfConfig":"39"},{"size":891,"mtime":1615891807323,"results":"55","hashOfConfig":"39"},{"size":779,"mtime":1611830135517,"results":"56","hashOfConfig":"39"},{"size":516,"mtime":1611738600616,"results":"57","hashOfConfig":"39"},{"size":1502,"mtime":1615891559619,"results":"58","hashOfConfig":"39"},{"size":1316,"mtime":1618068715056,"results":"59","hashOfConfig":"39"},{"size":3132,"mtime":1616408920197,"results":"60","hashOfConfig":"39"},{"size":5003,"mtime":1618051691251,"results":"61","hashOfConfig":"39"},{"size":2871,"mtime":1618068819572,"results":"62","hashOfConfig":"39"},{"size":246,"mtime":1613142613036,"results":"63","hashOfConfig":"39"},{"size":4003,"mtime":1617998256443,"results":"64","hashOfConfig":"39"},{"size":680,"mtime":1616156032580,"results":"65","hashOfConfig":"39"},{"size":2427,"mtime":1616068623633,"results":"66","hashOfConfig":"39"},{"size":1153,"mtime":1615461899584,"results":"67","hashOfConfig":"39"},{"size":3601,"mtime":1617018714238,"results":"68","hashOfConfig":"39"},{"size":2621,"mtime":1616146785158,"results":"69","hashOfConfig":"39"},{"size":294,"mtime":1615898981785,"results":"70","hashOfConfig":"39"},{"size":874,"mtime":1615904503553,"results":"71","hashOfConfig":"39"},{"size":1873,"mtime":1616162989309,"results":"72","hashOfConfig":"39"},{"size":1617,"mtime":1616408223415,"results":"73","hashOfConfig":"39"},{"size":1317,"mtime":1617893613060,"results":"74","hashOfConfig":"39"},{"size":1872,"mtime":1618068446289,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},"16kgyt2",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"84"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"102"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"84"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"102"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"102"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"102"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\IT\\way_of_the_samurai\\my-app\\src\\App.tsx",["165"],"import React from 'react';\nimport './App.css';\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport {DialogsContainer} from \"./components/Dialogs/DialogsContainer\";\nimport {NavbarContainer} from \"./components/Navbar/NavbarContainer\";\nimport {UsersContainerContext} from \"./components/Users/UsersContainer\";\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\nimport HeaderContainer from \"./components/Header/headerContainer\";\nimport Login from \"./components/Login/Login\";\nimport {connect} from \"react-redux\";\nimport {initializeApp} from \"./redux/App-reducer\";\nimport {StateStoreType} from \"./redux/redux-store\";\nimport {Preloader} from \"./components/Common/Preloader/Preloader\";\n\n\ntype AppPropsType = {\n    initializeApp: () => void\n    initialized: boolean\n}\n\nclass App extends React.Component<AppPropsType, unknown> {\n\n    componentDidMount() {\n        this.props.initializeApp()\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n\n        return (\n                <div className={\"app-wrapper\"}>\n                    <HeaderContainer/>\n                    <NavbarContainer/>\n                    <div className={\"app-wrapper-content\"}>\n                        <Route path=\"/dialogs\"\n                               render={() => <DialogsContainer/>}/>\n                        {/*в пути пишем, чтобы он отображал params (userId), параметр для withRouters, если пути совпадут. Тут мы говорим : по айди и стамив ? - который говорит что id не обязателен*/}\n                        <Route path=\"/Profile/:userId?\"\n                               render={() => <ProfileContainer/>}/>\n                        <Route path={\"/users\"}\n                               render={() => <UsersContainerContext/>}/>\n                        <Route path={\"/login\"}\n                               render={() => <Login/>}/>\n                    </div>\n                </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: StateStoreType) => {\n    return {\n        initialized: state.app.initialized\n    }\n}\n\nexport default connect(mapStateToProps, {initializeApp})(App);\n\n","C:\\IT\\way_of_the_samurai\\my-app\\src\\reportWebVitals.ts",[],["166","167"],"C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Header\\header.tsx",[],["168","169"],"C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Profile\\Profile.tsx",[],["170","171"],"C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Profile\\MyPosts\\MyPosts.tsx",[],"C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx",["172"],"import React from \"react\";\r\nimport s from \"./Post.module.css\";\r\n\r\ntype PostType = {\r\n    message: string\r\n    likes: number\r\n}\r\n\r\nconst Post: React.FC<PostType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSOfqBBnGW-ntm2BhRJQQJupmw5Gh5drIDnvA&usqp=CAU\"/>\r\n            { props.message }\r\n            <div>\r\n                <span>like {props.likes}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Dialogs\\Dialogs.tsx",[],["173","174"],"C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Navbar\\Navbar.tsx",["175","176","177"],"import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from \"./Navbar.module.css\";\r\n\r\ntype FriendsType = {\r\n    id: number\r\n    name: string\r\n}\r\ntype friendsType = {\r\n    friends: Array<FriendsType>\r\n}\r\ntype NavbarType = {\r\n    sidebar: friendsType\r\n}\r\n\r\nconst Navbar: React.FC<NavbarType> = (props) => {\r\n\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a href=\"/news\">News</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a href=\"/music\">Music</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a href=\"/settings\">Settings</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a href=\"/friends\">Friends</a>\r\n                <div className={s.friends}>\r\n                    <div className={s.friend}>\r\n                        <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS_iEXq5Tq8suPbnZd51iuXk2m7Q64Zide5WA&usqp=CAU\"/>\r\n                        <br/>\r\n                        {props.sidebar.friends[0].name}\r\n                    </div>\r\n                    <div className={s.friend}>\r\n                        <img src=\"https://i.pinimg.com/originals/0c/a9/e2/0ca9e28dcb12dc698cfd2beda6d6fa64.jpg\"/>\r\n                        <br/>\r\n                        {props.sidebar.friends[1].name}\r\n                    </div>\r\n                    <div className={s.friend}>\r\n                        <img src=\"https://klike.net/uploads/posts/2019-03/1551511784_4.jpg\"/>\r\n                        <br/>\r\n                        {props.sidebar.friends[2].name}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Profile\\MyPosts\\ProfileInfo\\ProfileInfo.tsx",["178"],"import React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport {ProfileType} from \"../../../../redux/Profile-reducer\";\r\nimport {Preloader} from \"../../../Common/Preloader/Preloader\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\n\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoType> = (props) => {\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/*<div>\r\n                <img src=\"https://lh5.googleusercontent.com/oDUgUwudwBlIQ3WSyBE3gZ58_tqhKTDBkic65snFp2x5ZKamuzmyfG-WqYI8AC5vl1iu4RAZhW7JdwnCdyW0lA5RNyCbA5XjW6dBVcHw1hPbYZ1yGX82YIH2pWi4JdgFY38VPPd4\"/>\r\n            </div>*/}\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.large}/>\r\n                <ProfileStatusWithHooks\r\n                    status={props.status}\r\n                    updateStatus={props.updateStatus}\r\n                />\r\n            </div>\r\n            <div>\r\n                Обо мне: {props.profile.aboutMe}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;",["179","180"],"C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Dialogs\\DialogItem\\DialogItem.tsx",[],"C:\\IT\\way_of_the_samurai\\my-app\\src\\index.tsx",[],"C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Dialogs\\Message\\Message.tsx",[],["181","182"],"C:\\IT\\way_of_the_samurai\\my-app\\src\\redux\\Profile-reducer.tsx",["183"],"import React from 'react';\r\nimport {Dispatch} from \"redux\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\n\r\ntype PostsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    contacts: {\r\n        facebook: string\r\n        website: null //\r\n        vk: string\r\n        twitter: string\r\n        instagram: string\r\n        youtube: null //\r\n        github: string\r\n        mainLink: null\r\n    },\r\n    lookingForAJob: true,\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\nexport type ProfilePageType = {\r\n    posts: Array<PostsType>\r\n    //newPostText: string\r\n    profile: ProfileType | null\r\n    status: string\r\n}\r\nexport type ProfileReducerActionType =\r\n    ReturnType<typeof addPostActionCreator> |\r\n    ReturnType<typeof setUsersProfile> |\r\n    ReturnType<typeof setStatus> |\r\n    ReturnType<typeof deletePost>\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hi, how are you?\", likesCount: 11},\r\n        {id: 2, message: \"It's my first message\", likesCount: 12},\r\n        {id: 3, message: \"Yo!\", likesCount: 12},\r\n        {id: 4, message: \"Dada\", likesCount: 12}\r\n    ],\r\n    //newPostText: 'new post...',\r\n    profile: null,\r\n    status: \"\"\r\n}\r\n\r\nconst ADD_POST = \"ADD-POST\"\r\nconst SET_USER_PROFILE = \"SET-USER-PROFILE\"\r\nconst SET_STATUS = \"SET-STATUS\"\r\nconst DELETE_POST = \"DELETE-POST\"\r\n\r\nconst profileReducer = (state: ProfilePageType = initialState, action: ProfileReducerActionType) => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: \"\"\r\n            }\r\n        }\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case \"DELETE-POST\":\r\n            return {...state, posts: state.posts.filter(p => p.id !== action.postId)}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addPostActionCreator = (newPostText: string) => ({type: ADD_POST, newPostText}) as const\r\n\r\nexport const setUsersProfile = (profile: ProfileType) => ({type: SET_USER_PROFILE, profile}) as const\r\n\r\nexport const setStatus = (status: string) => ({type: SET_STATUS, status}) as const\r\n\r\nexport const deletePost = (postId: number) => ({type: DELETE_POST, postId}) as const\r\n\r\n// Thunk\r\nexport const getUserProfile = (userId: string) => {\r\n    return async (dispatch: Dispatch<ProfileReducerActionType>) => {\r\n        const response = await usersAPI.getProfile(userId)\r\n        dispatch(setUsersProfile(response.data))\r\n\r\n    }\r\n}\r\n\r\nexport const getStatus = (userId: string) => {\r\n    return async (dispatch: Dispatch<ProfileReducerActionType>) => {\r\n        const response = await profileAPI.getStatus(userId)\r\n        dispatch(setStatus(response.data))\r\n        //console.log(`thunk api: ${response.data}`)\r\n    }\r\n}\r\n\r\nexport const updateStatus = (status: string) => {\r\n    return async (dispatch: Dispatch<ProfileReducerActionType>) => {\r\n        const response = await profileAPI.updateStatus(status)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setStatus(status))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default profileReducer;","C:\\IT\\way_of_the_samurai\\my-app\\src\\redux\\redux-store.tsx",[],"C:\\IT\\way_of_the_samurai\\my-app\\src\\redux\\Sidebar-reducer.tsx",[],"C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx",["184"],"import React, {Dispatch} from \"react\";\r\nimport {\r\n    addPostActionCreator,\r\n    ProfileReducerActionType,\r\n} from \"../../../redux/Profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateStoreType} from \"../../../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state: StateStoreType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        //newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch<ProfileReducerActionType>) => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\n","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Dialogs\\DialogsContainer.tsx",[],"C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Navbar\\NavbarContainer.tsx",["185"],"import React, {Dispatch} from \"react\";\r\nimport Navbar from \"./Navbar\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateStoreType} from \"../../redux/redux-store\";\r\n\r\n// const NavbarContainer: React.FC<NavbarType> = (props) => {\r\n//\r\n//     return <StoreContext.Consumer>\r\n//         {(store) => {\r\n//             let state = store.getState().sidebar\r\n//\r\n//             return <Navbar sidebar={state}/>\r\n//         }}\r\n//     </StoreContext.Consumer>\r\n// }\r\n//\r\n// export default NavbarContainer;\r\n\r\nlet mapStateToProps = (state: StateStoreType) => {\r\n    return {\r\n        sidebar: state.sidebar\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch<any>) => {\r\n    return {\r\n\r\n    }\r\n}\r\n\r\nexport const NavbarContainer = connect(mapStateToProps, mapDispatchToProps)(Navbar)","C:\\IT\\way_of_the_samurai\\my-app\\src\\StoreContext.tsx",[],"C:\\IT\\way_of_the_samurai\\my-app\\src\\redux\\Dialogs-reducer.tsx",[],"C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Users\\users.tsx",[],"C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Users\\UsersContainer.tsx",["186"],"import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    followUser, requestUsers, setCurrentPage, unfollowUser,\r\n    UserType\r\n} from \"../../redux/Users-reducer\";\r\nimport {StateStoreType} from \"../../redux/redux-store\";\r\nimport {Users} from \"./users\";\r\nimport {Preloader} from \"../Common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsersFromReselectLibrary\r\n} from \"../../redux/users-selectors\";\r\n\r\n\r\ntype UsersPagePropsType = {\r\n    users: Array<UserType>\r\n    followUser: (userId: number) => void\r\n    unfollowUser: (userId: number) => void\r\n    setCurrentPage: (pageNumber: number) => void\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\n// Типизация классовой компоненты. Первый параметр - типизация пропсов, второй - типизация стейта.\r\n// Пропсы конструктора типизируем как и пропсы компоненты.\r\n\r\nclass UsersContainer extends React.Component<UsersPagePropsType, Array<UserType>> {\r\n\r\n    constructor(props: UsersPagePropsType) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.isFetching ? <Preloader/> : null}\r\n                <Users\r\n                    totalUsersCount={this.props.totalUsersCount}\r\n                    pageSize={this.props.pageSize}\r\n                    currentPage={this.props.currentPage}\r\n                    users={this.props.users}\r\n                    onPageChanged={this.onPageChanged}\r\n                    followUser={this.props.followUser}\r\n                    unfollowUser={this.props.unfollowUser}\r\n                    followingInProgress={this.props.followingInProgress}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nlet mapStateToProps = (state: StateStoreType) => {\r\n    return {\r\n        users: getUsersFromReselectLibrary(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\nexport const UsersContainerContext = compose<React.ComponentType>(\r\n    //withAuthRedirect,\r\n    connect(mapStateToProps, {unfollowUser, followUser, setCurrentPage, getUsers: requestUsers})\r\n)(UsersContainer)\r\n\r\n// // withAuthRedirect - custom Hoc from folder hoc\r\n// export const UsersContainerContext = withAuthRedirect(connect(mapStateToProps,\r\n//     {\r\n//         unfollowUser, followUser, setCurrentPage, getUsers\r\n//     })(UsersContainer))","C:\\IT\\way_of_the_samurai\\my-app\\src\\redux\\Users-reducer.tsx",["187"],"C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Profile\\ProfileContainer.tsx",[],"C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Common\\Preloader\\Preloader.tsx",["188"],"import preloader from \"../../../assets/images/48083.gif\";\r\nimport React from \"react\";\r\n\r\nexport let Preloader = () => {\r\n    return (\r\n        <div style={{backgroundColor: \"yellow\"}}>\r\n            <img src={preloader}/>\r\n        </div>\r\n    )\r\n}","C:\\IT\\way_of_the_samurai\\my-app\\src\\redux\\Auth-reducer.tsx",[],"C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Header\\headerContainer.tsx",[],"C:\\IT\\way_of_the_samurai\\my-app\\src\\api\\api.ts",[],"C:\\IT\\way_of_the_samurai\\my-app\\src\\hoc\\withAuthRedirect.tsx",[],"C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Profile\\MyPosts\\ProfileInfo\\ProfileStatus.tsx",["189"],"C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Login\\Login.tsx",[],"C:\\IT\\way_of_the_samurai\\my-app\\src\\utils\\validators\\validators.ts",[],"C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Common\\FormsControls\\FormsControls.tsx",[],"C:\\IT\\way_of_the_samurai\\my-app\\src\\redux\\App-reducer.tsx",[],"C:\\IT\\way_of_the_samurai\\my-app\\src\\redux\\users-selectors.ts",[],"C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Profile\\MyPosts\\ProfileInfo\\ProfileStatusWithHooks.tsx",["190"],"C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Users\\user.tsx",["191"],{"ruleId":"192","severity":1,"message":"193","line":3,"column":9,"nodeType":"194","messageId":"195","endLine":3,"endColumn":22},{"ruleId":"196","replacedBy":"197"},{"ruleId":"198","replacedBy":"199"},{"ruleId":"196","replacedBy":"200"},{"ruleId":"198","replacedBy":"201"},{"ruleId":"196","replacedBy":"202"},{"ruleId":"198","replacedBy":"203"},{"ruleId":"204","severity":1,"message":"205","line":12,"column":13,"nodeType":"206","endLine":12,"endColumn":125},{"ruleId":"196","replacedBy":"207"},{"ruleId":"198","replacedBy":"208"},{"ruleId":"204","severity":1,"message":"205","line":42,"column":25,"nodeType":"206","endLine":42,"endColumn":137},{"ruleId":"204","severity":1,"message":"205","line":47,"column":25,"nodeType":"206","endLine":47,"endColumn":114},{"ruleId":"204","severity":1,"message":"205","line":52,"column":25,"nodeType":"206","endLine":52,"endColumn":94},{"ruleId":"204","severity":1,"message":"205","line":26,"column":17,"nodeType":"206","endLine":26,"endColumn":56},{"ruleId":"196","replacedBy":"209"},{"ruleId":"198","replacedBy":"210"},{"ruleId":"196","replacedBy":"211"},{"ruleId":"198","replacedBy":"212"},{"ruleId":"192","severity":1,"message":"213","line":1,"column":8,"nodeType":"194","messageId":"195","endLine":1,"endColumn":13},{"ruleId":"192","severity":1,"message":"213","line":1,"column":8,"nodeType":"194","messageId":"195","endLine":1,"endColumn":13},{"ruleId":"192","severity":1,"message":"213","line":1,"column":8,"nodeType":"194","messageId":"195","endLine":1,"endColumn":13},{"ruleId":"214","severity":1,"message":"215","line":38,"column":5,"nodeType":"216","messageId":"217","endLine":40,"endColumn":6},{"ruleId":"218","severity":1,"message":"219","line":89,"column":75,"nodeType":"220","messageId":"221","endLine":89,"endColumn":77},{"ruleId":"204","severity":1,"message":"205","line":7,"column":13,"nodeType":"206","endLine":7,"endColumn":35},{"ruleId":"192","severity":1,"message":"222","line":2,"column":8,"nodeType":"194","messageId":"195","endLine":2,"endColumn":9},{"ruleId":"192","severity":1,"message":"222","line":2,"column":8,"nodeType":"194","messageId":"195","endLine":2,"endColumn":9},{"ruleId":"204","severity":1,"message":"205","line":21,"column":25,"nodeType":"206","endLine":23,"endColumn":71},"@typescript-eslint/no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","no-native-reassign",["223"],"no-negated-in-lhs",["224"],["223"],["224"],["223"],["224"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["223"],["224"],["223"],["224"],["223"],["224"],"'React' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'s' is defined but never used.","no-global-assign","no-unsafe-negation"]