[{"C:\\IT\\way_of_the_samurai\\my-app\\src\\App.tsx":"1","C:\\IT\\way_of_the_samurai\\my-app\\src\\reportWebVitals.ts":"2","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Header\\header.tsx":"3","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Profile\\Profile.tsx":"4","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Profile\\MyPosts\\MyPosts.tsx":"5","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx":"6","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Dialogs\\Dialogs.tsx":"7","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Navbar\\Navbar.tsx":"8","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Profile\\MyPosts\\ProfileInfo\\ProfileInfo.tsx":"9","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Dialogs\\DialogItem\\DialogItem.tsx":"10","C:\\IT\\way_of_the_samurai\\my-app\\src\\index.tsx":"11","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Dialogs\\Message\\Message.tsx":"12","C:\\IT\\way_of_the_samurai\\my-app\\src\\redux\\Profile-reducer.tsx":"13","C:\\IT\\way_of_the_samurai\\my-app\\src\\redux\\redux-store.tsx":"14","C:\\IT\\way_of_the_samurai\\my-app\\src\\redux\\Sidebar-reducer.tsx":"15","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx":"16","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Dialogs\\DialogsContainer.tsx":"17","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Navbar\\NavbarContainer.tsx":"18","C:\\IT\\way_of_the_samurai\\my-app\\src\\StoreContext.tsx":"19","C:\\IT\\way_of_the_samurai\\my-app\\src\\redux\\Dialogs-reducer.tsx":"20","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Users\\users.tsx":"21","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Users\\UsersContainer.tsx":"22","C:\\IT\\way_of_the_samurai\\my-app\\src\\redux\\Users-reducer.tsx":"23","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Profile\\ProfileContainer.tsx":"24","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Common\\Preloader\\Preloader.tsx":"25"},{"size":1454,"mtime":1613647323878,"results":"26","hashOfConfig":"27"},{"size":425,"mtime":1607600916665,"results":"28","hashOfConfig":"27"},{"size":353,"mtime":1609325522253,"results":"29","hashOfConfig":"27"},{"size":519,"mtime":1613571490148,"results":"30","hashOfConfig":"27"},{"size":1460,"mtime":1611755108838,"results":"31","hashOfConfig":"27"},{"size":518,"mtime":1611404191200,"results":"32","hashOfConfig":"27"},{"size":1605,"mtime":1611755037089,"results":"33","hashOfConfig":"27"},{"size":2193,"mtime":1612523202588,"results":"34","hashOfConfig":"27"},{"size":959,"mtime":1613645361817,"results":"35","hashOfConfig":"27"},{"size":443,"mtime":1611419467941,"results":"36","hashOfConfig":"27"},{"size":989,"mtime":1611750492117,"results":"37","hashOfConfig":"27"},{"size":327,"mtime":1611419467803,"results":"38","hashOfConfig":"27"},{"size":2449,"mtime":1613572176935,"results":"39","hashOfConfig":"27"},{"size":734,"mtime":1612962094063,"results":"40","hashOfConfig":"27"},{"size":412,"mtime":1611428281080,"results":"41","hashOfConfig":"27"},{"size":880,"mtime":1613118776864,"results":"42","hashOfConfig":"27"},{"size":860,"mtime":1612639567838,"results":"43","hashOfConfig":"27"},{"size":779,"mtime":1611830135517,"results":"44","hashOfConfig":"27"},{"size":516,"mtime":1611738600616,"results":"45","hashOfConfig":"27"},{"size":2278,"mtime":1612637208937,"results":"46","hashOfConfig":"27"},{"size":2493,"mtime":1613565010595,"results":"47","hashOfConfig":"27"},{"size":4040,"mtime":1613419181345,"results":"48","hashOfConfig":"27"},{"size":2873,"mtime":1613418799633,"results":"49","hashOfConfig":"27"},{"size":2072,"mtime":1613647700618,"results":"50","hashOfConfig":"27"},{"size":246,"mtime":1613142613036,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"16kgyt2",{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"59"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"59"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"59"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"59"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"59"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\IT\\way_of_the_samurai\\my-app\\src\\App.tsx",["110"],"C:\\IT\\way_of_the_samurai\\my-app\\src\\reportWebVitals.ts",[],["111","112"],"C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Header\\header.tsx",[],["113","114"],"C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Profile\\Profile.tsx",[],"C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Profile\\MyPosts\\MyPosts.tsx",[],"C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx",["115"],"import React from \"react\";\r\nimport s from \"./Post.module.css\";\r\n\r\ntype PostType = {\r\n    message: string\r\n    likes: number\r\n}\r\n\r\nconst Post: React.FC<PostType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSOfqBBnGW-ntm2BhRJQQJupmw5Gh5drIDnvA&usqp=CAU\"/>\r\n            { props.message }\r\n            <div>\r\n                <span>like {props.likes}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Dialogs\\Dialogs.tsx",[],"C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Navbar\\Navbar.tsx",["116","117","118"],"import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from \"./Navbar.module.css\";\r\n\r\ntype FriendsType = {\r\n    id: number\r\n    name: string\r\n}\r\ntype friendsType = {\r\n    friends: Array<FriendsType>\r\n}\r\ntype NavbarType = {\r\n    sidebar: friendsType\r\n}\r\n\r\nconst Navbar: React.FC<NavbarType> = (props) => {\r\n\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a href=\"/news\">News</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a href=\"/music\">Music</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a href=\"/settings\">Settings</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a href=\"/friends\">Friends</a>\r\n                <div className={s.friends}>\r\n                    <div className={s.friend}>\r\n                        <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS_iEXq5Tq8suPbnZd51iuXk2m7Q64Zide5WA&usqp=CAU\"/>\r\n                        <br/>\r\n                        {props.sidebar.friends[0].name}\r\n                    </div>\r\n                    <div className={s.friend}>\r\n                        <img src=\"https://i.pinimg.com/originals/0c/a9/e2/0ca9e28dcb12dc698cfd2beda6d6fa64.jpg\"/>\r\n                        <br/>\r\n                        {props.sidebar.friends[1].name}\r\n                    </div>\r\n                    <div className={s.friend}>\r\n                        <img src=\"https://klike.net/uploads/posts/2019-03/1551511784_4.jpg\"/>\r\n                        <br/>\r\n                        {props.sidebar.friends[2].name}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Profile\\MyPosts\\ProfileInfo\\ProfileInfo.tsx",["119","120"],"C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Dialogs\\DialogItem\\DialogItem.tsx",[],"C:\\IT\\way_of_the_samurai\\my-app\\src\\index.tsx",[],"C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Dialogs\\Message\\Message.tsx",[],"C:\\IT\\way_of_the_samurai\\my-app\\src\\redux\\Profile-reducer.tsx",["121"],"import React from 'react';\r\n\r\ntype PostsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    contacts: {\r\n        facebook: string\r\n        website: null //\r\n        vk: string\r\n        twitter: string\r\n        instagram: string\r\n        youtube: null //\r\n        github: string\r\n        mainLink: null\r\n    },\r\n    lookingForAJob: true,\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\nexport type ProfilePageType = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n    profile: ProfileType | null\r\n}\r\nexport type ProfileReducerActionType =\r\n    ReturnType<typeof addPostActionCreator> |\r\n    ReturnType<typeof updateNewPostTextActionCreator>|\r\n    ReturnType<typeof setUsersProfile>\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hi, how are you?\", likesCount: 11},\r\n        {id: 2, message: \"It's my first message\", likesCount: 12},\r\n        {id: 3, message: \"Yo!\", likesCount: 12},\r\n        {id: 4, message: \"Dada\", likesCount: 12}\r\n    ],\r\n    newPostText: 'new post...',\r\n    profile: null\r\n}\r\n\r\nconst ADD_POST = \"ADD-POST\"\r\nconst UPDATE_NEW_POST_TEXT = \"UPDATE-NEW-POST-TEXT\"\r\nconst SET_USER_PROFILE = \"SET-USER-PROFILE\"\r\n\r\nconst profileReducer = (state: ProfilePageType = initialState, action: ProfileReducerActionType) => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 5,\r\n                message: state.newPostText,\r\n                likesCount: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: \"\"\r\n            }\r\n        }\r\n        case UPDATE_NEW_POST_TEXT: {\r\n            return {\r\n                ...state,\r\n                newPostText: action.newText\r\n            }\r\n        }\r\n        case SET_USER_PROFILE:{\r\n            return {...state, profile: action.profile}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addPostActionCreator = () => ({type: ADD_POST}) as const\r\n\r\nexport const setUsersProfile = (profile: ProfileType) =>\r\n    ({type: SET_USER_PROFILE, profile}) as const\r\n\r\nexport const updateNewPostTextActionCreator = (text: string) =>\r\n    ({type: UPDATE_NEW_POST_TEXT, newText: text}) as const\r\n\r\nexport default profileReducer;","C:\\IT\\way_of_the_samurai\\my-app\\src\\redux\\redux-store.tsx",[],"C:\\IT\\way_of_the_samurai\\my-app\\src\\redux\\Sidebar-reducer.tsx",[],"C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx",["122"],"C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Dialogs\\DialogsContainer.tsx",["123","124"],"C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Navbar\\NavbarContainer.tsx",["125"],"import React, {Dispatch} from \"react\";\r\nimport Navbar from \"./Navbar\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateStoreType} from \"../../redux/redux-store\";\r\n\r\n// const NavbarContainer: React.FC<NavbarType> = (props) => {\r\n//\r\n//     return <StoreContext.Consumer>\r\n//         {(store) => {\r\n//             let state = store.getState().sidebar\r\n//\r\n//             return <Navbar sidebar={state}/>\r\n//         }}\r\n//     </StoreContext.Consumer>\r\n// }\r\n//\r\n// export default NavbarContainer;\r\n\r\nlet mapStateToProps = (state: StateStoreType) => {\r\n    return {\r\n        sidebar: state.sidebar\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch<any>) => {\r\n    return {\r\n\r\n    }\r\n}\r\n\r\nexport const NavbarContainer = connect(mapStateToProps, mapDispatchToProps)(Navbar)","C:\\IT\\way_of_the_samurai\\my-app\\src\\StoreContext.tsx",[],"C:\\IT\\way_of_the_samurai\\my-app\\src\\redux\\Dialogs-reducer.tsx",[],"C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Users\\users.tsx",["126"],"import React from \"react\";\r\nimport style from \"./Users.module.css\";\r\nimport {UserType} from \"../../redux/Users-reducer\";\r\nimport userPhoto from \"../../assets/images/user.jpg\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype UsersComponentType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    users: Array<UserType>\r\n    onPageChanged: (pageNumber: number) => void\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\n\r\nexport const Users: React.FC<UsersComponentType> = (props) => {\r\n\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {pages.map(p => {\r\n                    return <span\r\n                        onClick={(e) => {\r\n                            props.onPageChanged(p)\r\n                        }}\r\n                        className={props.currentPage === p ? style.selectedPage : \"\"}>{p}</span>\r\n                })}\r\n            </div>\r\n            {\r\n                props.users.map((u: UserType) => <div key={u.id}>\r\n                    <span>\r\n                        <div>\r\n                            <NavLink to={'profile/' + u.id}>\r\n                                <img src={u.photos.small != null ? u.photos.small : userPhoto}\r\n                                     className={style.userPhoto}/>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div>\r\n                            {u.followed\r\n                                ? <button onClick={() => {\r\n                                    props.unfollow(u.id)\r\n                                }}>Unfollow</button>\r\n                                : <button onClick={() => {\r\n                                    props.follow(u.id)\r\n                                }}>Follow</button>}\r\n                        </div>\r\n                    </span>\r\n                    <span>\r\n                        <span>\r\n                            <div>{u.name}</div>\r\n                            <div>{u.status}</div>\r\n                        </span>\r\n                        <span>\r\n                            <div>{\"u.location.country\"}</div>\r\n                            <div>{\"u.location.city\"}</div>\r\n                        </span>\r\n                    </span>\r\n                </div>)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Users\\UsersContainer.tsx",["127","128"],"import React, {Dispatch} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    follow, setCurrentPage, setUsers,\r\n    setUsersTotalCount, toggleIsFetching, unfollow,\r\n    UserType\r\n} from \"../../redux/Users-reducer\";\r\nimport {StateStoreType} from \"../../redux/redux-store\";\r\nimport axios from \"axios\";\r\nimport {Users} from \"./users\";\r\nimport {Preloader} from \"../Common/Preloader/Preloader\";\r\n\r\ntype UsersPagePropsType = {\r\n    users: Array<UserType>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setUsers: (users: Array<UserType>) => void\r\n    setCurrentPage: (pageNumber: number) => void\r\n    setUsersTotalCount: (totalCount: number) => void\r\n    toggleIsFetching: (isFetching: boolean) => void\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n}\r\n// Типизация классовой компоненты. Первый параметр - типизация пропсов, второй - типизация стейта.\r\n// Пропсы конструктора типизируем как и пропсы компоненты.\r\n\r\nclass UsersContainer extends React.Component<UsersPagePropsType, Array<UserType>> {\r\n\r\n    constructor(props: UsersPagePropsType) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.toggleIsFetching(true)\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`).then(response => {\r\n            this.props.toggleIsFetching(false)\r\n            this.props.setUsers(response.data.items)\r\n            this.props.setUsersTotalCount(response.data.totalCount)\r\n        })\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.setCurrentPage(pageNumber)\r\n        this.props.toggleIsFetching(true)\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`).then(response => {\r\n            this.props.toggleIsFetching(false)\r\n            this.props.setUsers(response.data.items)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.isFetching ? <Preloader/> : null}\r\n                <Users\r\n                    totalUsersCount={this.props.totalUsersCount}\r\n                    pageSize={this.props.pageSize}\r\n                    currentPage={this.props.currentPage}\r\n                    users={this.props.users}\r\n                    onPageChanged={this.onPageChanged}\r\n                    follow={this.props.follow}\r\n                    unfollow={this.props.unfollow}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nlet mapStateToProps = (state: StateStoreType) => {\r\n    return {\r\n        users: state.usersPage.users\r\n        ,\r\n        pageSize: state.usersPage.pageSize\r\n        ,\r\n        totalUsersCount: state.usersPage.totalUsersCount\r\n        ,\r\n        currentPage: state.usersPage.currentPage\r\n        ,\r\n        isFetching: state.usersPage.isFetching\r\n    }\r\n}\r\n\r\n// let mapDispatchToProps = (dispatch: Dispatch<UsersReducerActionType>) => {\r\n//     return {\r\n//         follow: (userId: number) => {\r\n//             dispatch(followAC(userId))\r\n//         },\r\n//         unfollow: (userId: number) => {\r\n//             dispatch(unfollowAC(userId))\r\n//         },\r\n//         setUsers: (users: Array<UserType>) => {\r\n//             dispatch(setUsersAC(users))\r\n//         },\r\n//         setCurrentPage: (pageNumber: number) => {\r\n//             dispatch(setCurrentPageAC(pageNumber))\r\n//         },\r\n//         setTotalCount: (totalCount: number) => {\r\n//             dispatch(setUsersTotalCountAC(totalCount))\r\n//         },\r\n//         toggleIsFetching: (isFetching: boolean) => {\r\n//             dispatch(toggleIsFetchingAC(isFetching))\r\n//         }\r\n//     }\r\n// }\r\n\r\nexport const UsersContainerContext = connect(mapStateToProps,\r\n    {follow, unfollow, setUsers, setCurrentPage,\r\n        setUsersTotalCount, toggleIsFetching})(UsersContainer)","C:\\IT\\way_of_the_samurai\\my-app\\src\\redux\\Users-reducer.tsx",[],"C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Profile\\ProfileContainer.tsx",[],"C:\\IT\\way_of_the_samurai\\my-app\\src\\components\\Common\\Preloader\\Preloader.tsx",["129"],{"ruleId":"130","severity":1,"message":"131","line":4,"column":8,"nodeType":"132","messageId":"133","endLine":4,"endColumn":15},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"134","replacedBy":"138"},{"ruleId":"136","replacedBy":"139"},{"ruleId":"140","severity":1,"message":"141","line":12,"column":13,"nodeType":"142","endLine":12,"endColumn":125},{"ruleId":"140","severity":1,"message":"141","line":42,"column":25,"nodeType":"142","endLine":42,"endColumn":137},{"ruleId":"140","severity":1,"message":"141","line":47,"column":25,"nodeType":"142","endLine":47,"endColumn":114},{"ruleId":"140","severity":1,"message":"141","line":52,"column":25,"nodeType":"142","endLine":52,"endColumn":94},{"ruleId":"140","severity":1,"message":"141","line":19,"column":17,"nodeType":"142","endLine":19,"endColumn":200},{"ruleId":"140","severity":1,"message":"141","line":22,"column":17,"nodeType":"142","endLine":22,"endColumn":56},{"ruleId":"130","severity":1,"message":"143","line":1,"column":8,"nodeType":"132","messageId":"133","endLine":1,"endColumn":13},{"ruleId":"130","severity":1,"message":"143","line":1,"column":8,"nodeType":"132","messageId":"133","endLine":1,"endColumn":13},{"ruleId":"130","severity":1,"message":"143","line":1,"column":8,"nodeType":"132","messageId":"133","endLine":1,"endColumn":13},{"ruleId":"130","severity":1,"message":"144","line":5,"column":5,"nodeType":"132","messageId":"133","endLine":5,"endColumn":20},{"ruleId":"130","severity":1,"message":"143","line":1,"column":8,"nodeType":"132","messageId":"133","endLine":1,"endColumn":13},{"ruleId":"140","severity":1,"message":"141","line":42,"column":33,"nodeType":"142","endLine":43,"endColumn":67},{"ruleId":"130","severity":1,"message":"145","line":1,"column":16,"nodeType":"132","messageId":"133","endLine":1,"endColumn":24},{"ruleId":"146","severity":1,"message":"147","line":31,"column":5,"nodeType":"148","messageId":"149","endLine":33,"endColumn":6},{"ruleId":"140","severity":1,"message":"141","line":7,"column":13,"nodeType":"142","endLine":7,"endColumn":35},"@typescript-eslint/no-unused-vars","'Profile' is defined but never used.","Identifier","unusedVar","no-native-reassign",["150"],"no-negated-in-lhs",["151"],["150"],["151"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'React' is defined but never used.","'DialogsPageType' is defined but never used.","'Dispatch' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]