{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","to","name","Message","message","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogsItems","AddMessageFormRedux","onSubmit","values","addNewMessage","newMessageBody","maxLength","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","validate","required","placeholder","DialogsContainer","compose","connect","dispatch","addMessageInStateActionCreator","withAuthRedirect"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,6FCgBnKC,EAR+B,SAACC,GAC3C,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OAAO,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACH,cAAC,IAAD,CAASC,GAAIN,EAAb,SAAoBD,EAAMQ,UCGnBC,EARwB,SAACT,GACpC,OACI,8BACI,qBAAKG,UAAWC,IAAEM,QAAlB,SAA4BV,EAAMU,a,kCC6B/BC,EAxB6B,SAACX,GAEzC,IAAIY,EAAQZ,EAAMa,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAACC,GAAD,OAAuB,cAAC,EAAD,CAAYT,KAAMS,EAAET,KAAiBN,GAAIe,EAAEf,IAAZe,EAAEf,OAC5FgB,EAAmBN,EAAMO,SAASH,KAAI,SAACI,GAAD,OAAqB,cAAC,EAAD,CAASV,QAASU,EAAEV,SAAcU,EAAElB,OAMnG,OACI,sBAAKC,UAAWC,IAAEW,QAAlB,UACI,qBAAKZ,UAAWC,IAAEiB,aAAlB,SACKP,IAEL,qBAAKX,UAAWC,IAAEe,SAAlB,SACI,8BAAMD,MAEV,cAACI,EAAD,CAAqBC,SAZV,SAACC,GAChBxB,EAAMyB,cAAcD,EAAOE,uBAsB7BC,EAAYC,YAAiB,IAoB7BN,EAAsBO,YAA8B,CACtDC,KAAM,qBADkBD,EAlB4C,SAAC7B,GACrE,OACI,uBAAMuB,SAAUvB,EAAM+B,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CACIC,UAAWC,IACXC,SAAU,CAACC,IAAUT,GACrBnB,KAAM,iBACN6B,YAAa,yBAGrB,8BACI,kD,wBCpCVC,EAAmBC,YACrBC,aAdkB,SAAC5B,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAGF,SAAC4B,GACtB,MAAO,CACHhB,cAAe,SAACC,GACZe,EAASC,YAA+BhB,SAOhDiB,IAFqBJ,CAGvB5B,GAEa2B","file":"static/js/4.d390edec.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3cD9y\",\"dialogsItems\":\"Dialogs_dialogsItems__241DA\",\"active\":\"Dialogs_active__GO2iw\",\"messages\":\"Dialogs_messages__1XPoo\",\"message\":\"Dialogs_message__1RLlF\"};","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from './../Dialogs.module.css'\r\n\r\nexport type DialogItemType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem: React.FC <DialogItemType> = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;\r\n\r\n\r\n","import React from \"react\";\r\nimport s from './../Dialogs.module.css'\r\n\r\n\r\nexport type MessageType = {\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<MessageType> = (props) => {\r\n    return (\r\n        <div>\r\n            <div className={s.message}>{props.message}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;\r\n\r\n","import React from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem, {DialogItemType} from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPageType, MessagesType} from \"../../redux/Dialogs-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\n\r\ntype DialogsPropsType = {\r\n    dialogsPage: DialogsPageType\r\n    addNewMessage: (newMessageBody: string) => void\r\n    isAuth: boolean\r\n}\r\n\r\nconst Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements = state.dialogs.map((d: DialogItemType) => <DialogItem name={d.name} key={d.id} id={d.id}/>)\r\n    let messagesElements = state.messages.map((m: MessagesType) => <Message message={m.message} key={m.id}/>)\r\n\r\n    const addMessage = (values: AddMessageFormType) => {\r\n        props.addNewMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;\r\n\r\ntype AddMessageFormType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength = maxLengthCreator(50)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessageFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    validate={[required, maxLength]}\r\n                    name={\"newMessageBody\"}\r\n                    placeholder={\"enter your message\"}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<AddMessageFormType>({\r\n    form: \"dialogMessageForm\"\r\n})(AddMessageForm)\r\n","import React from \"react\";\r\nimport {\r\n    addMessageInStateActionCreator,\r\n    DialogsReducerActionType\r\n} from \"../../redux/Dialogs-reducer\"\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateStoreType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch } from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\nlet mapStateToProps = (state: StateStoreType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch<DialogsReducerActionType>) => {\r\n    return {\r\n        addNewMessage: (newMessageBody: string) => {\r\n            dispatch(addMessageInStateActionCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nconst DialogsContainer = compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\nexport default DialogsContainer"],"sourceRoot":""}