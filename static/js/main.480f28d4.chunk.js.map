{"version":3,"sources":["redux/Users-reducer.tsx","assets/images/user.jpg","components/Common/Button/Button.module.scss","api/api.ts","components/Profile/ProfileInfo/ProfileStatusWithHooks.module.scss","components/Navbar/Navbar.module.css","reportWebVitals.ts","redux/Profile-reducer.tsx","redux/Dialogs-reducer.tsx","redux/Sidebar-reducer.tsx","redux/Auth-reducer.tsx","redux/App-reducer.tsx","redux/redux-store.tsx","components/Navbar/Navbar.tsx","components/Navbar/NavbarContainer.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Common/FormsControls/FormsControls.tsx","components/Common/Button/Button.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","hoc/withAuthRedirect.tsx","components/Profile/ProfileContainer.tsx","components/Header/header.tsx","components/Header/headerContainer.tsx","utils/validators/validators.ts","assets/images/socialNetwork.jpg","components/Login/Login.tsx","components/Chat/ChatPage.tsx","App.tsx","hoc/withSuspense.tsx","index.tsx","components/Chat/ChatPage.module.scss","components/Profile/ProfileInfo/ProfileInfo.module.scss","components/Login/Login.module.scss","components/Common/Preloader/Preloader.tsx","components/Common/FormsControls/FormsControls.module.css","components/Header/header.module.scss","components/Profile/MyPosts/MyPosts.module.scss","components/Profile/MyPosts/Post/Post.module.css","components/Profile/Profile.module.scss"],"names":["FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","follow","userId","type","unfollow","setCurrentPage","toggleIsFetching","toggleIsFollowingProgress","requestUsers","page","dispatch","a","usersAPI","getUsers","data","items","totalCount","followUnfollowFlow","apiMethod","actionCreator","followUser","bind","unfollowUser","unFollowUser","usersReducer","state","action","map","u","id","followed","filter","module","exports","instance","axios","create","baseURL","withCredentials","headers","get","then","response","post","resultCode","delete","getProfile","profileAPI","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","authAPI","auth","login","email","password","rememberMe","captcha","logout","securityAPI","getCaptchaUrl","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","posts","message","likesCount","profile","newPostText","setStatus","profileReducer","newPost","p","postId","photos","messages","dialogs","name","ADD_POST_ACTION_CONTAINER","dialogsReducer","newMessageCopy","newMessageBody","friends","sidebarReducer","isAuth","captchaUrl","setAuthUserData","payload","getCaptchaUrlSuccess","getAuthUserData","url","authReducer","INITIALIZED_SUCCESS","initialized","reducers","combineReducers","profilePage","dialogsPage","sidebar","usersPage","form","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Navbar","props","className","s","nav","item","to","activeClassName","activeLink","NavbarContainer","connect","Post","avaAndMessage","src","style","fontSize","likes","FormControl","input","meta","child","hasError","touched","error","formControl","children","Textarea","restProps","Input","Button","btn","disabled","text","MyPosts","React","memo","postsElements","postBlock","MyPostsFormRedux","onSubmit","value","addPost","reduxForm","handleSubmit","Field","component","textarea","placeholder","MyPostsContainer","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","useEffect","onDoubleClick","onChange","e","currentTarget","autoFocus","onBlur","ProfileData","profileData","fullName","ProfileInfo","descriptionBlock","photoBlock","large","userPhoto","mainPhoto","isOwner","inputFile","target","files","length","goToEditMode","Profile","profileGlobalBlock","profileBlock","preloaderBlock","Preloader","mapStateToPropsForRedirect","ProfileContainer","this","match","params","String","authorisedUserId","history","push","getUserProfile","refreshProfile","prevProps","prevState","snapshot","Component","alert","file","withRouter","Header","header","loginBlock","onClick","HeaderContainer","required","LoginReduxForm","mainDiv","imageBlock","image","pic","formBlock","marginTop","validate","field","checkboxText","style2","captchaImage","formSummaryError","stopSubmit","_error","validCaptcha","ChatPage","chatPageBlock","Chat","wsChannel","setWsChannel","ws","closeHandler","console","log","setTimeout","createChannel","removeEventListener","close","WebSocket","addEventListener","chatBlock","Messages","setMessages","messageHandler","newMessages","JSON","parse","prevMessages","divRef","useRef","current","scrollIntoView","behavior","messagesBlock","height","overflowY","m","index","ref","Message","messageBlock","avaAndNameBlock","width","photo","userName","messageText","AddMessageForm","setMessage","readyStatus","setReadyStatus","openHandler","addMessageFormBlock","send","UsersContainerContext","lazy","App","initializeApp","exact","path","render","Suspense","fallback","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.480f28d4.chunk.js","sourcesContent":["import {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../api/api\";\r\n\r\n\r\nexport type UserType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: null\r\n    photos: {\r\n        \"small\": null | string | undefined\r\n        \"large\": null\r\n    }\r\n    status: string\r\n    followed: boolean\r\n}\r\nexport type UsersReducerStateType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nexport type UsersReducerActionType =\r\n    | ReturnType<typeof follow>\r\n    | ReturnType<typeof unfollow>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setUsersTotalCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleIsFollowingProgress>\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET-USERS'\r\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE'\r\nconst SET_TOTAL_USERS_COUNT = \"SET-TOTAL-USERS-COUNT\"\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE-IS-FETCHING\"\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = \"TOGGLE-IS-FOLLOWING-PROGRESS\"\r\n\r\nlet initialState: UsersReducerStateType = {\r\n    users: [],\r\n    pageSize: 15,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\nconst usersReducer = (state: UsersReducerStateType = initialState, action: UsersReducerActionType) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {...state, users: action.users}\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter((id: number) => id != action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const follow = (userId: number) => ({type: FOLLOW, userId}) as const\r\nexport const unfollow = (userId: number) => ({type: UNFOLLOW, userId}) as const\r\nexport const setUsers = (users: Array<UserType>) => ({type: SET_USERS, users}) as const\r\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage}) as const\r\nexport const setUsersTotalCount = (totalUsersCount: number) => ({type: SET_TOTAL_USERS_COUNT, totalUsersCount}) as const\r\nexport const toggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching}) as const\r\nexport const toggleIsFollowingProgress = (isFetching: boolean, userId: number) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching,\r\n    userId\r\n}) as const\r\n\r\n// THUNKS\r\nexport const requestUsers = (page: number, pageSize: number) => {\r\n    return async (dispatch: Dispatch<UsersReducerActionType>) => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPage(page))\r\n        const data = await usersAPI.getUsers(page, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n        dispatch(setUsersTotalCount(data.totalCount))\r\n    }\r\n}\r\n\r\n/*Вспомогательная функция для двух нижних санок, т.к. в них код дублируется*/\r\nconst followUnfollowFlow = async (dispatch: Dispatch<UsersReducerActionType>, userId: number, apiMethod: any, actionCreator: any) => {\r\n    toggleIsFollowingProgress(true, userId)\r\n    const resultCode = await apiMethod(userId)\r\n    if (resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleIsFollowingProgress(false, userId))\r\n}\r\n\r\nexport const followUser = (userId: number) => (dispatch: Dispatch<UsersReducerActionType>) => {\r\n    followUnfollowFlow(dispatch, userId, usersAPI.followUser.bind(usersAPI), follow)\r\n}\r\n\r\nexport const unfollowUser = (userId: number) => (dispatch: Dispatch<UsersReducerActionType>) => {\r\n    followUnfollowFlow(dispatch, userId, usersAPI.unFollowUser.bind(usersAPI), unfollow)\r\n}\r\n\r\n\r\nexport default usersReducer;","export default __webpack_public_path__ + \"static/media/user.4933fe16.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__1qnU4\"};","import axios from \"axios\";\r\n\r\nconst instance = axios.create({ /* облегчает работу с axios запросами, подставляя автоматически нужные данные */\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\", /* в строке URL автоматически будет подставляться перед другой частью адреса. */\r\n    withCredentials: true, /* аргумент который передаётся в запрос для того, чтобы разрешить отправку cookie. Передаётся вторым параметром DELETE и третьим параметром в POST */\r\n    headers: {\"API-KEY\": \"e68751ec-99e4-4ba5-aeca-d3d2975884b0\"} /* ключ для авторизация передаётся в POST и DELETE запросах третьим аргументом в axios запросах. Добавляется в cookie, чтобы сервер понял что ты авторизован и вернул нужные данные */\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    followUser(id: number) {\r\n        return instance.post(`follow/${id}`)\r\n            .then(response => {\r\n                return response.data.resultCode\r\n            })\r\n    },\r\n    unFollowUser(id: number) {\r\n        return instance.delete(`follow/${id}`)\r\n            .then(response => {\r\n                return response.data.resultCode\r\n            })\r\n    },\r\n    getProfile(userId: string) {\r\n        return profileAPI.getProfile(userId)\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: string) {\r\n        return instance.get(`profile/` + userId)\r\n    },\r\n    getStatus(userId: string) {\r\n        return instance.get(`profile/status/` + userId)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status`, {status})\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData()\r\n        formData.append(\"image\", photoFile)\r\n        return instance.put(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    auth() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false, captcha: string | null = null) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe, captcha})\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n       return instance.get(\"/security/get-captcha-url\")\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"status\":\"ProfileStatusWithHooks_status__36bZK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2mfzy\",\"item\":\"Navbar_item__2R_Sa\",\"activeLink\":\"Navbar_activeLink__2SsGP\",\"friends\":\"Navbar_friends__W6GWC\",\"friend\":\"Navbar_friend__q-yo_\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport {Dispatch} from \"redux\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\n\r\ntype PostsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    contacts: {\r\n        facebook: string\r\n        website: null //\r\n        vk: string\r\n        twitter: string\r\n        instagram: string\r\n        youtube: null //\r\n        github: string\r\n        mainLink: null\r\n    },\r\n    lookingForAJob: true,\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\nexport type ProfilePageType = {\r\n    posts: Array<PostsType>\r\n    profile: ProfileType | null\r\n    status: string\r\n    newPostText: string\r\n}\r\nexport type ProfileReducerActionType =\r\n    | ReturnType<typeof addPostActionCreator>\r\n    | ReturnType<typeof setUsersProfile>\r\n    | ReturnType<typeof setStatus>\r\n    | ReturnType<typeof deletePost>\r\n    | ReturnType<typeof savePhotoSuccess>\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Yo yo!\", likesCount: 11},\r\n        {id: 2, message: \"It's my first message\", likesCount: 12}\r\n    ],\r\n    profile: null,\r\n    status: \"\",\r\n    newPostText: \"\"\r\n}\r\n\r\nconst profileReducer = (state: ProfilePageType = initialState, action: ProfileReducerActionType): ProfilePageType => {\r\n    switch (action.type) {\r\n        case \"ADD-POST\": {\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [newPost, ...state.posts],\r\n                newPostText: \"\"\r\n            }\r\n        }\r\n        case \"SET-STATUS\": {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case \"SET-USER-PROFILE\": {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case \"DELETE-POST\":\r\n            return {...state, posts: state.posts.filter(p => p.id !== action.postId)}\r\n        case \"SAVE-PHOTO-SUCCESS\":\r\n            return {\r\n                ...state,\r\n                profile: {\r\n                    ...state.profile,\r\n                    photos: action.photos\r\n                } as ProfileType\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addPostActionCreator = (newPostText: string) => ({type: \"ADD-POST\", newPostText}) as const\r\nexport const setUsersProfile = (profile: ProfileType) => ({type: \"SET-USER-PROFILE\", profile}) as const\r\nexport const setStatus = (status: string) => ({type: \"SET-STATUS\", status}) as const\r\nexport const deletePost = (postId: number) => ({type: \"DELETE-POST\", postId}) as const\r\nexport const savePhotoSuccess = (photos: { small: string, large: string }) => ({\r\n    type: \"SAVE-PHOTO-SUCCESS\",\r\n    photos\r\n}) as const\r\n\r\n// Thunk\r\nexport const getUserProfile = (userId: string) => {\r\n    return async (dispatch: Dispatch<ProfileReducerActionType>) => {\r\n        const response = await usersAPI.getProfile(userId)\r\n        dispatch(setUsersProfile(response.data))\r\n\r\n    }\r\n}\r\nexport const getStatus = (userId: string) => {\r\n    return async (dispatch: Dispatch<ProfileReducerActionType>) => {\r\n        const response = await profileAPI.getStatus(userId)\r\n        dispatch(setStatus(response.data))\r\n    }\r\n}\r\nexport const updateStatus = (status: string) => {\r\n    return async (dispatch: Dispatch<ProfileReducerActionType>) => {\r\n        try {\r\n            const response = await profileAPI.updateStatus(status)\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setStatus(status))\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n}\r\nexport const savePhoto = (file: File) => {\r\n    return async (dispatch: Dispatch<ProfileReducerActionType>) => {\r\n        const response = await profileAPI.savePhoto(file)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(savePhotoSuccess(response.data.data.photos))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default profileReducer;","export type MessagesType = {\r\n    id: number\r\n    message: string\r\n}\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type DialogsPageType = {\r\n    messages: Array<MessagesType>\r\n    dialogs: Array<DialogsType>\r\n    //newMessage: string\r\n}\r\n\r\nexport type DialogsReducerActionType =\r\n    ReturnType<typeof addMessageInStateActionCreator>\r\n\r\nlet initialState = {\r\n    messages: [\r\n        {id: 1, message: \"hi\"},\r\n        {id: 2, message: 'How is your it-kamasutra?'},\r\n        {id: 3, message: 'yo'},\r\n        {id: 4, message: 'yo'},\r\n        {id: 5, message: 'yo'},\r\n    ],\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych'},\r\n        {id: 2, name: 'Andrey'},\r\n        {id: 3, name: 'Sveta'},\r\n        {id: 4, name: 'Sasha'},\r\n        {id: 5, name: 'Viktor'},\r\n        {id: 6, name: 'Valera'}\r\n    ]\r\n}\r\n\r\nconst ADD_POST_ACTION_CONTAINER = \"ADD-POST-ACTION-CONTAINER\"\r\n\r\n\r\nconst dialogsReducer = (state: DialogsPageType = initialState, action: DialogsReducerActionType) => {\r\n    switch (action.type) {\r\n        case ADD_POST_ACTION_CONTAINER:\r\n            let newMessageCopy = action.newMessageBody\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 7, message: newMessageCopy}]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addMessageInStateActionCreator = (newMessageBody: string) =>\r\n    ({type: ADD_POST_ACTION_CONTAINER, newMessageBody}) as const\r\n\r\nexport default dialogsReducer;\r\n\r\n","type FriendsType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type SidebarType = {\r\n    friends: Array<FriendsType>\r\n}\r\n\r\nlet initialState = {\r\n    friends: [\r\n        {id: 1, name: \"Andrew\"},\r\n        {id: 2, name: \"Sasha\"},\r\n        {id: 3, name: \"Sveta\"}\r\n    ]\r\n}\r\n\r\nconst sidebarReducer = (state: SidebarType = initialState, action: any) => {\r\n\r\n    return state\r\n}\r\n\r\n\r\n\r\nexport default sidebarReducer;","import {authAPI, securityAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {FormAction} from \"redux-form\";\r\nimport {StateStoreType} from \"./redux-store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {stopSubmit} from \"redux-form\"\r\n\r\ntype AuthReducerStateType = {\r\n    userId: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\ntype AuthReducerActionType =\r\n    | ReturnType<typeof setAuthUserData>\r\n    | ReturnType<typeof getCaptchaUrlSuccess>\r\n\r\nlet initialState: AuthReducerStateType = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captchaUrl: null\r\n}\r\n\r\nconst authReducer = (state: AuthReducerStateType = initialState, action: AuthReducerActionType): AuthReducerStateType => {\r\n    switch (action.type) {\r\n        case \"SET_USER_DATA\":\r\n        case \"GET-CAPTCHA-URL-SUCCESS\":\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (userId: number | null, email: string | null, login: string | null, isAuth: boolean) =>\r\n    ({type: \"SET_USER_DATA\", payload: {userId, email, login, isAuth}}) as const\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string) => ({\r\n    type: \"GET-CAPTCHA-URL-SUCCESS\",\r\n    payload: {captchaUrl}\r\n}) as const\r\n\r\n\r\nexport const getAuthUserData = () => async (dispatch: Dispatch<AuthReducerActionType>) => {\r\n    let response = await authAPI.auth()\r\n    if (response.data.resultCode === 0) {\r\n        let {id, email, login} = response.data.data\r\n        dispatch(setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): AuthReducerThunkT => {\r\n    return async (dispatch) => {\r\n        let response = await authAPI.login(email, password, rememberMe, captcha)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(getAuthUserData())\r\n        } else {\r\n            if (response.data.resultCode === 10) {\r\n                dispatch(getCaptchaUrl())\r\n            }\r\n            /* action creator из библиотеки redux form для ошибки в введённых данных. Прекращает отправку форм\r\n            первым параметром передаем какую форму мы останавливаем, вторым свойством (email) передаём проблемное поле которое вызвало ошибку\r\n            если я введу неправильный меил то мне подсветит ошибку\r\n            Общая ошибка для всей формы _error. Также есть общая ошибка для не правильно введёных данных, которая задиспачит её в стейт и через пропсы мы потом сможем вывести содержимое это ошибки */\r\n            let message = response.data.messages.length > 0 ? response.data.messages[0] : 'some error'\r\n            let action = stopSubmit(\"login\", {_error: message})\r\n            dispatch(action)\r\n        }\r\n    }\r\n}\r\nexport const getCaptchaUrl = () => {\r\n    return async (dispatch: Dispatch<AuthReducerActionType>) => {\r\n        const response = await securityAPI.getCaptchaUrl()\r\n        const captchaUrl = response.data.url\r\n        dispatch(getCaptchaUrlSuccess(captchaUrl))\r\n    }\r\n}\r\nexport const logout = (): AuthReducerThunkT => {\r\n    return async (dispatch) => {\r\n        let response = await authAPI.logout()\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setAuthUserData(null, null, null, false))\r\n        }\r\n    }\r\n}\r\n\r\nexport default authReducer;\r\n\r\ntype AuthReducerThunkT<ReturnType = void> = ThunkAction<ReturnType, StateStoreType, unknown, AuthReducerActionType | FormAction>;\r\n\r\n/*\r\nда там все просто, первый агршумент, это тип которые санка, ПОТЕНЦИАЛЬНО будет возвращать, второй Состояние\r\nприложения, третий это доп параметры, которые санка принемает, не считая диспатча, а 4-й это все экшены которые\r\nей разрешено диспатчить. Если собрать все экшенны со всего АПП и передать их в типизацию санки, то получишь\r\nуниверсальную типизацию санки для всего АПП\r\n*/","import {getAuthUserData} from \"./Auth-reducer\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {StateStoreType} from \"./redux-store\";\r\n\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED-SUCCESS'\r\n\r\ntype AppReducerStateType = {\r\n    initialized: boolean\r\n}\r\ntype AppReducerActionType = ReturnType<typeof initializedSuccess>\r\n\r\nlet initialState: AppReducerStateType = {\r\n    initialized: false\r\n}\r\n\r\nexport const appReducer = (state: AppReducerStateType = initialState, action: AppReducerActionType): AppReducerStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializedSuccess = () => ({type: INITIALIZED_SUCCESS})\r\n\r\nexport const initializeApp = (): AppReducerThunkType => {\r\n    return (dispatch) => {\r\n        let promise = dispatch(getAuthUserData())\r\n        promise.then(() => {\r\n            dispatch(initializedSuccess())\r\n        })\r\n    }\r\n}\r\n\r\ntype AppReducerThunkType<ReturnType = void> = ThunkAction<ReturnType, StateStoreType, unknown, AppReducerActionType>;\r\n\r\n/*\r\nда там все просто, первый агршумент, это тип которые санка, ПОТЕНЦИАЛЬНО будет возвращать, второй Состояние\r\nприложения, третий это доп параметры, которые санка принемает, не считая диспатча, а 4-й это все экшены которые\r\nей разрешено диспатчить. Если собрать все экшенны со всего АПП и передать их в типизацию санки, то получишь\r\nуниверсальную типизацию санки для всего АПП\r\n*/\r\n\r\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./Profile-reducer\";\r\nimport dialogsReducer from \"./Dialogs-reducer\";\r\nimport sidebarReducer from \"./Sidebar-reducer\";\r\nimport usersReducer from \"./Users-reducer\";\r\nimport authReducer from \"./Auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\"; // yarn add redux-thunk по дефолту импортирует thunk, а не (thunkMiddleware). Передаём вторым параметром в createStore, чтобы стор смог обрабатывать thunks.\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport {appReducer} from \"./App-reducer\";\r\n\r\nexport type StateStoreType = ReturnType<typeof reducers> // тип стейта\r\n\r\nexport type StoreType = typeof store // типизация всего стора\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n})\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n//export let store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from \"./Navbar.module.css\";\r\n\r\ntype FriendsType = {\r\n    id: number\r\n    name: string\r\n}\r\ntype friendsType = {\r\n    friends: Array<FriendsType>\r\n}\r\ntype NavbarType = {\r\n    sidebar: friendsType\r\n}\r\n\r\nconst Navbar: React.FC<NavbarType> = (props) => {\r\n\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            {/*<div className={s.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>*/}\r\n            <div className={s.item}>\r\n                <NavLink to=\"/chat\" activeClassName={s.activeLink}>Chat</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\" activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/settings\" activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n            {/*<div className={s.item}>\r\n                <a href=\"/friends\">Friends</a>\r\n                <div className={s.friends}>\r\n                    <div className={s.friend}>\r\n                        <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS_iEXq5Tq8suPbnZd51iuXk2m7Q64Zide5WA&usqp=CAU\"/>\r\n                        <br/>\r\n                        {props.sidebar.friends[0].name}\r\n                    </div>\r\n                    <div className={s.friend}>\r\n                        <img src=\"https://i.pinimg.com/originals/0c/a9/e2/0ca9e28dcb12dc698cfd2beda6d6fa64.jpg\"/>\r\n                        <br/>\r\n                        {props.sidebar.friends[1].name}\r\n                    </div>\r\n                    <div className={s.friend}>\r\n                        <img src=\"https://klike.net/uploads/posts/2019-03/1551511784_4.jpg\"/>\r\n                        <br/>\r\n                        {props.sidebar.friends[2].name}\r\n                    </div>\r\n                </div>\r\n            </div>*/}\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React, {Dispatch} from \"react\";\r\nimport Navbar from \"./Navbar\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateStoreType} from \"../../redux/redux-store\";\r\n\r\n// const NavbarContainer: React.FC<NavbarType> = (props) => {\r\n//\r\n//     return <StoreContext.Consumer>\r\n//         {(store) => {\r\n//             let state = store.getState().sidebar\r\n//\r\n//             return <Navbar sidebar={state}/>\r\n//         }}\r\n//     </StoreContext.Consumer>\r\n// }\r\n//\r\n// export default NavbarContainer;\r\n\r\nlet mapStateToProps = (state: StateStoreType) => {\r\n    return {\r\n        sidebar: state.sidebar\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch<any>) => {\r\n    return {\r\n\r\n    }\r\n}\r\n\r\nexport const NavbarContainer = connect(mapStateToProps, mapDispatchToProps)(Navbar)","import React from \"react\";\r\nimport s from \"./Post.module.css\";\r\n\r\ntype PostType = {\r\n    message: string\r\n    likes: number\r\n}\r\n\r\nconst Post: React.FC<PostType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <div className={s.avaAndMessage}>\r\n                <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSOfqBBnGW-ntm2BhRJQQJupmw5Gh5drIDnvA&usqp=CAU\"/>\r\n                <div className={s.message}>{props.message}</div>\r\n            </div>\r\n            <div>\r\n                <span style={{fontSize: 'small'}}>like {props.likes}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport style from './FormsControls.module.css'\r\n\r\nexport const FormControl: React.FC = ({input, meta, child, ...props}: any) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={style.formControl + \" \" + (hasError ? style.error : \"\")}>\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps} ></textarea></FormControl>\r\n}\r\n\r\nexport const Input: React.FC = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps} ></input></FormControl>\r\n}","import React from 'react'\r\nimport s from \"./Button.module.scss\"\r\n\r\ntype ButtonPropsType = {\r\n    text: string\r\n    disabled?: boolean\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = (props) => {\r\n    return (\r\n        <button className={s.btn}\r\n                disabled={props.disabled}\r\n        >{props.text}</button>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./MyPosts.module.scss\";\r\nimport Post from \"./Post/Post\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\nimport {Button} from \"../../Common/Button/Button\";\r\n\r\ntype PostsArrayType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\nexport type MyPostsType = {\r\n    posts: Array<PostsArrayType>\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MyPostsType> = React.memo((props) => {\r\n\r\n    let postsElements =\r\n        props.posts.map((p: PostsArrayType) => <Post message={p.message} likes={p.likesCount}/>)\r\n\r\n    const addPost = (value: MyPostsFormType) => {\r\n        props.addPost(value.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postBlock}>\r\n            <div>\r\n                <MyPostsFormRedux onSubmit={addPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default MyPosts;\r\n\r\ntype MyPostsFormType = {\r\n    newPostText: string\r\n}\r\n\r\n/*const maxLength10 = maxLengthCreator(10)*/\r\n\r\nconst AddNewPostsForm: React.FC<InjectedFormProps<MyPostsFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea}\r\n                   className={s.textarea}\r\n                   name={\"newPostText\"}\r\n                   placeholder={\"new post\"}\r\n                   /*validate={[required, maxLength10]}*/\r\n            />\r\n            <div>\r\n                <Button text={\"Add\"} />\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst MyPostsFormRedux = reduxForm<MyPostsFormType>({form: \"ProfileAddPostForm\"})(AddNewPostsForm)","import React, {Dispatch} from \"react\";\r\nimport {\r\n    addPostActionCreator,\r\n    ProfileReducerActionType,\r\n} from \"../../../redux/Profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateStoreType} from \"../../../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state: StateStoreType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch<ProfileReducerActionType>) => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\n","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport s from \"./ProfileStatusWithHooks.module.scss\"\r\n\r\ntype ProfileInfoType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks: React.FC<ProfileInfoType> = (props) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div className={s.status}>\r\n               <div onDoubleClick={activateEditMode}>{props.status || 'change status'}</div>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input\r\n                    onChange={onStatusChange}\r\n                    autoFocus={true}\r\n                    onBlur={deactivateEditMode}\r\n                    value={status}\r\n                />\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from \"./ProfileInfo.module.scss\"\r\nimport {ProfileType} from \"../../../redux/Profile-reducer\";\r\nimport {Preloader} from \"../../Common/Preloader/Preloader\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"./../../../assets/images/user.jpg\"\r\nimport {ProfileDataForm} from \"./ProfileDataForm\";\r\n\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoType> = (props) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    if (!props.profile) {\r\n        return <div>loading</div>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <div className={s.photoBlock}>\r\n                    <img src={props.profile.photos.large || userPhoto} className={s.mainPhoto}/>\r\n                    {props.isOwner && <input type={\"file\"}\r\n                                             className={s.inputFile}\r\n                                             onChange={onMainPhotoSelected}/>}\r\n                </div>\r\n                <ProfileData goToEditMode={() => setEditMode(true)}\r\n                             profile={props.profile}\r\n                             status={props.status}\r\n                             updateStatus={props.updateStatus}\r\n                             isOwner={props.isOwner}/>\r\n                {/*<ProfileStatusWithHooks status={props.status}\r\n                                        updateStatus={props.updateStatus}\r\n                />*/}\r\n                {/*{editMode\r\n                    ? <ProfileDataForm profile={props.profile}/>\r\n                    : <ProfileData goToEditMode={() => setEditMode(true)}\r\n                                   profile={props.profile}\r\n                                   status={props.status}\r\n                                   updateStatus={props.updateStatus}\r\n                                   isOwner={props.isOwner}/>\r\n                }*/}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: any // FIX\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\nexport const ProfileData = (props: ProfileDataPropsType) => {\r\n    return (\r\n        <div className={s.profileData}>\r\n            <div className={s.name}>\r\n                {props.profile.fullName}\r\n            </div>\r\n            <ProfileStatusWithHooks status={props.status}\r\n                                    updateStatus={props.updateStatus}/>\r\n            {/*{props.isOwner && <div>\r\n                <button onClick={props.goToEditMode}>edit</button>\r\n            </div>}\r\n            <div>\r\n                <b>Full name</b>: {props.profile?.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {props.profile?.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {props.profile?.lookingForAJob &&\r\n            <div>\r\n                <b>My professional skills</b>: {props.profile?.lookingForAJobDescription}\r\n            </div>\r\n            }\r\n\r\n            <div>\r\n                <b>About me</b>: {props.profile?.aboutMe}\r\n            </div>\r\n            <div>\r\n\r\n                <b>Contacts</b>: {\r\n                // @ts-ignore\r\n                Object.keys(props.profile?.contacts).map(key => {\r\n                    // @ts-ignore\r\n                    return <Contact key={key} contactTitle={key} contactValue={props.profile?.contacts[key]}/>\r\n                })}\r\n            </div>*/}\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: any\r\n}\r\n\r\nexport const Contact = (props: ContactPropsType) => {\r\n    return <div className={s.contact}><b>{props.contactTitle}</b>: {props.contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {ProfileType} from \"../../redux/Profile-reducer\";\r\nimport s from \"./Profile.module.scss\"\r\nimport {Preloader} from \"../Common/Preloader/Preloader\";\r\n\r\ntype ProfileComponentType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n}\r\n\r\nconst Profile: React.FC<ProfileComponentType> = (props) => {\r\n    return (\r\n        <div className={s.profileGlobalBlock}>\r\n            {!props.profile\r\n                ? <div className={s.preloaderBlock}>\r\n                    <Preloader/>\r\n                  </div>\r\n                : <div className={s.profileBlock}>\r\n                    <ProfileInfo profile={props.profile}\r\n                                 status={props.status}\r\n                                 updateStatus={props.updateStatus}\r\n                                 isOwner={props.isOwner}\r\n                                 savePhoto={props.savePhoto}\r\n                    />\r\n                    <MyPostsContainer/>\r\n                </div>\r\n            }\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Profile;","import {Redirect} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {StateStoreType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStatePropsTypeForRedirect = {\r\n    isAuth: boolean\r\n}\r\nlet mapStateToPropsForRedirect = (state: StateStoreType): MapStatePropsTypeForRedirect => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStatePropsTypeForRedirect) => {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n\r\n}\r\n\r\n// Создан HOC который даёт контейнерной компоненте в пропсах булевое значение isAuth, которое отвечает за авторизацию.\r\n// если не залогинен на серваке, тогда будет редирект на логин.","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, ProfileType, savePhoto, updateStatus} from \"../../redux/Profile-reducer\";\r\nimport {StateStoreType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorisedUserId: number | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n}\r\ntype PathParamsType = { // типизация параметра для withRouter - RouteComponentProps<PathParamsType>\r\n    userId: string\r\n}\r\ntype ProfileContainerType = RouteComponentProps<PathParamsType> & MapDispatchPropsType & MapStatePropsType\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerType, ProfileType> {\r\n\r\n    refreshProfile() {\r\n// если у нас нет айди, когда мы просто перешли в profile по пути /profile тогда говорим что бы айди по умолчанию было authorisedUserId\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = String(this.props.authorisedUserId)\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: StateStoreType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorisedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n/*// custom Hoc from folder hoc\r\nlet AuthRedirectComponent = withAuthRedirect(ProfileContainer)\r\n\r\n// функция withRouter создаёт контейнер и передаёт через пропсы данные из url\r\nlet WithUrlDataContainerComponent = withRouter(AuthRedirectComponent)\r\n// контейнер для redux, который получает также инфу по URL\r\nexport default connect(mapStateToProps, {profileThunk: getUserProfile})(WithUrlDataContainerComponent)*/\r\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from \"./header.module.scss\";\r\n\r\ntype HeaderTypePropsType = {\r\n    login: string | null\r\n    isAuth: boolean\r\n    logout: () => void\r\n}\r\n\r\nconst Header: React.FC<HeaderTypePropsType> = (props) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth\r\n                    ? <div className={s.auth}>\r\n                        <span>{props.login}</span>\r\n                        <button className={s.btn}\r\n                                onClick={props.logout}>Log out\r\n                        </button>\r\n                    </div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport Header from \"./header\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateStoreType} from \"../../redux/redux-store\";\r\nimport {logout} from \"../../redux/Auth-reducer\";\r\n\r\ntype HeaderContainerType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logout: () => void\r\n}\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerType, unknown> {\r\n\r\n    render() {\r\n        return (\r\n            <Header {...this.props}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst MapStateToProps = (state: StateStoreType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\nexport default connect(MapStateToProps, {logout})(HeaderContainer)\r\n","export const required = (value: any) => {\r\n    if (value) return undefined\r\n\r\n    return \"Field is required\"\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: any) => (value: any) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n\r\n    return undefined\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/socialNetwork.1a44fd3b.jpg\";","import React from 'react'\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../Common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/Auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {StateStoreType} from \"../../redux/redux-store\";\r\nimport style2 from './../Common/FormsControls/FormsControls.module.css'\r\nimport pic from \"../../assets/images/socialNetwork.jpg\"\r\nimport style from './Login.module.scss'\r\nimport {Button} from \"../Common/Button/Button\";\r\n\r\ntype TypeCaptcha = {\r\n    captchaUrl: string\r\n}\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\nexport const LoginForm: React.FC<InjectedFormProps<FormDataType, TypeCaptcha> & TypeCaptcha> = (props) => {\r\n\r\n    return (\r\n        <div className={style.mainDiv}>\r\n            <div className={style.imageBlock}>\r\n                <img className={style.image} src={pic}/>\r\n            </div>\r\n            <div className={style.formBlock}>\r\n                {/*handleSubmit функция из библиотеки form */}\r\n                <form onSubmit={props.handleSubmit} className={style.form}>\r\n                    <p style={{marginTop: '-15px'}}>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                    {/* Field контейнерная компонента из redux-form */}\r\n                    <Field placeholder={\"Email\"} name={\"email\"}\r\n                           validate={[required]}\r\n                           component={Input}/>\r\n                    <Field placeholder={\"Password\"} name={\"password\"} type={'password'}\r\n                           validate={[required]}\r\n                           component={Input}/>\r\n                    <div className={style.field}><Field type={\"checkbox\"} name={\"rememberMe\"} component={Input}/><span\r\n                        className={style.checkboxText}>remember me</span></div>\r\n                    {props.captchaUrl && <div><img className={style2.captchaImage} src={props.captchaUrl}/></div>}\r\n                    {props.captchaUrl && <Field component={\"input\"}\r\n                                                placeholder={\"anti bot symbols\"}\r\n                                                validate={[required]}\r\n                                                name={\"captcha\"}/>}\r\n                    {props.error && <div className={style2.formSummaryError}>\r\n                        {props.error}\r\n                    </div>}\r\n                    <Button text={\"Login\"}/>\r\n                </form>\r\n                <div>\r\n                    {/*Тестовая учётная запись для логинизации:\r\n                    Email: free@samuraijs.com\r\n                    Password: free*/}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// HOC reduxForm()() вначале настраивает, а потом вызывает hoc\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType, TypeCaptcha>({\r\n    // каждая форма должна иметь уникальное имя\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\ntype LoginPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n    isAuth: boolean\r\n    captcha: string | null\r\n}\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n\r\n    let validCaptcha = \"\"\r\n    if (props.captcha !== null) {\r\n        validCaptcha = props.captcha\r\n    }\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={validCaptcha}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: StateStoreType) => {\r\n    return {\r\n        captcha: state.auth.captchaUrl,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {login})(Login)","import React, {useEffect, useRef, useState} from \"react\"\r\nimport s from \"./ChatPage.module.scss\"\r\n\r\nexport type ChatMessageType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\n\r\nexport const ChatPage: React.FC = () => {\r\n    return (\r\n        <div className={s.chatPageBlock}>\r\n            <Chat/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Chat: React.FC = () => {\r\n    const [wsChannel, setWsChannel] = useState<WebSocket | null>(null)\r\n\r\n    useEffect(() => {\r\n        let ws: WebSocket\r\n        const closeHandler = () => {\r\n            console.log('close ws')\r\n            setTimeout(createChannel, 3000)\r\n        }\r\n\r\n        function createChannel() {\r\n            ws?.removeEventListener('close', closeHandler)\r\n            ws?.close()\r\n            ws = new WebSocket(\"wss://social-network.samuraijs.com/handlers/ChatHandler.ashx\")\r\n            ws.addEventListener(\"close\", closeHandler)\r\n            setWsChannel(ws)\r\n        }\r\n\r\n        createChannel()\r\n\r\n        return () => {\r\n            ws.removeEventListener('close', closeHandler)\r\n            ws.close()\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className={s.chatBlock}>\r\n            <Messages wsChannel={wsChannel}/>\r\n            <AddMessageForm wsChannel={wsChannel}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Messages: React.FC<{ wsChannel: WebSocket | null }> = ({wsChannel}) => {\r\n    const [messages, setMessages] = useState<ChatMessageType[]>([])\r\n\r\n    useEffect(() => {\r\n        let messageHandler = (e: MessageEvent) => {\r\n            let newMessages = JSON.parse(e.data)\r\n            setMessages(prevMessages => [...prevMessages, ...newMessages])\r\n        }\r\n        wsChannel?.addEventListener('message', messageHandler)\r\n\r\n        return () => {\r\n            wsChannel?.removeEventListener('message', messageHandler)\r\n        }\r\n    }, [wsChannel])\r\n\r\n    const divRef = useRef<any>(null);\r\n\r\n    useEffect(() => {\r\n        divRef.current.scrollIntoView({behavior: 'smooth'});\r\n    });\r\n\r\n    return (\r\n        <div className={s.messagesBlock} style={{height: '400px', overflowY: 'auto'}}>\r\n            {messages.map((m, index) => <Message key={index} message={m}/>)}\r\n            <div ref={divRef}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Message: React.FC<{ message: ChatMessageType }> = ({message}) => {\r\n    return (\r\n        <div className={s.messageBlock}>\r\n            <div className={s.avaAndNameBlock}>\r\n                <img style={{height: '30px', width: '30px'}} src={message.photo}/>\r\n                <div className={s.name}>{message.userName}</div>\r\n            </div>\r\n            <div className={s.messageText}>{message.message}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const AddMessageForm: React.FC<{ wsChannel: WebSocket | null }> = ({wsChannel}) => {\r\n    const [message, setMessage] = useState('')\r\n    const [readyStatus, setReadyStatus] = useState<'pending' | 'ready'>('pending')\r\n\r\n    useEffect(() => {\r\n        let openHandler = () => {\r\n            setReadyStatus('ready')\r\n        }\r\n\r\n        wsChannel?.addEventListener(\"open\", openHandler)\r\n\r\n        return () => {\r\n            wsChannel?.removeEventListener('open', openHandler)\r\n        }\r\n\r\n    }, [wsChannel])\r\n\r\n    const sendMessage = () => {\r\n        if (!message) return\r\n        wsChannel?.send(message)\r\n        setMessage('')\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.addMessageFormBlock}>\r\n            <textarea onChange={e => setMessage(e.currentTarget.value)}\r\n                      placeholder={\"your message\"}\r\n                      value={message}/>\r\n            <button disabled={wsChannel === null || readyStatus !== 'ready'}\r\n                    onClick={sendMessage}>Send</button>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.scss';\nimport {Redirect, Route, Switch} from \"react-router-dom\";\n/* import {DialogsContainer} from \"./components/Dialogs/DialogsContainer\";\nimport {UsersContainerContext} from \"./components/Users/UsersContainer\"; */\nimport {NavbarContainer} from \"./components/Navbar/NavbarContainer\";\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\nimport HeaderContainer from \"./components/Header/headerContainer\";\nimport Login from \"./components/Login/Login\";\nimport {connect} from \"react-redux\";\nimport {initializeApp} from \"./redux/App-reducer\";\nimport {StateStoreType} from \"./redux/redux-store\";\nimport {Preloader} from \"./components/Common/Preloader/Preloader\";\nimport {WithSuspense} from \"./hoc/withSuspense\";\nimport {ChatPage} from \"./components/Chat/ChatPage\";\n\n/*const DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'))*/\nconst UsersContainerContext = React.lazy(() => import(\"./components/Users/UsersContainer\"))\n/*const ChatPage = React.lazy(() => import(\"./components/Chat/ChatPage\"))*/\n\n/*const SuspendedChatPage = WithSuspense(<ChatPage/>)*/\n\ntype AppPropsType = {\n    initializeApp: () => void\n    initialized: boolean\n}\n\nclass App extends React.Component<AppPropsType, unknown> {\n\n    componentDidMount() {\n        this.props.initializeApp()\n    }\n\n    render() {\n        return (\n            <div className={\"globalDiv\"}>\n                {!this.props.initialized\n                    ? <div className={\"preloaderBlock\"}>\n                        <Preloader/>\n                    </div>\n                    : <div className={\"app-wrapper\"}>\n                        <div className={\"header\"}>\n                            <HeaderContainer/>\n                        </div>\n                        <div className={\"mainBlock\"}>\n                            <div className={\"navbar\"}>\n                                <NavbarContainer/>\n                            </div>\n                            <div className={\"appContent\"}>\n                                <div className={\"app-wrapper-content2\"}>\n                                    <Switch>\n                                        <Route exact path={\"/\"}\n                                               render={() => <Redirect to={\"/profile\"}/>}/>\n                                        {/*в пути пишем, чтобы он отображал params (userId), параметр для withRouters, если пути совпадут. Тут мы говорим : по айди и стамив ? - который говорит что id не обязателен*/}\n                                        <Route path=\"/Profile/:userId?\"\n                                               render={() => <ProfileContainer/>}/>\n                                        {/*<Route path=\"/dialogs\"\n                                               render={WithSuspense(DialogsContainer)}/>*/}\n                                        <Route path={\"/users\"}\n                                               render={WithSuspense(UsersContainerContext)}/>\n                                        <Route path={\"/login\"}\n                                               render={() => <Login/>}/>\n                                        <Route path={\"/chat\"}\n                                               render={() => <ChatPage/>}/>\n                                        <Route path={\"*\"}\n                                               render={() => <div>404 NOT FOUND</div>}/>\n                                    </Switch>\n                                </div>\n                            </div>\n                        </div>\n                    </div>}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: StateStoreType) => {\n    return {\n        initialized: state.app.initialized\n    }\n}\n\nexport default connect(mapStateToProps, {initializeApp})(App);\n\n","import React from \"react\"\r\nimport {Preloader} from \"../components/Common/Preloader/Preloader\";\r\n\r\nexport const WithSuspense = (Component: any) => {\r\n    return (props: any) => <React.Suspense fallback={<Preloader/>}>\r\n        <Component {...props}/>\r\n    </React.Suspense>\r\n}","import React from 'react';\nimport reportWebVitals from './reportWebVitals';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {store} from \"./redux/redux-store\";\nimport {Provider} from \"react-redux\";\nimport App from \"./App\";\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatPageBlock\":\"ChatPage_chatPageBlock__3Yss5\",\"messagesBlock\":\"ChatPage_messagesBlock__2A5nZ\",\"messageBlock\":\"ChatPage_messageBlock__2DOhu\",\"avaAndNameBlock\":\"ChatPage_avaAndNameBlock__iV6QW\",\"name\":\"ChatPage_name__SPTWB\",\"messageText\":\"ChatPage_messageText__2KwiG\",\"addMessageFormBlock\":\"ChatPage_addMessageFormBlock__1hwBt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3TGwI\",\"photoBlock\":\"ProfileInfo_photoBlock__UaAOK\",\"mainPhoto\":\"ProfileInfo_mainPhoto__2xyPJ\",\"inputFile\":\"ProfileInfo_inputFile__3WXIj\",\"profileData\":\"ProfileInfo_profileData__JUnxy\",\"name\":\"ProfileInfo_name__qdoug\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainDiv\":\"Login_mainDiv__2amiS\",\"imageBlock\":\"Login_imageBlock__zm-Vy\",\"image\":\"Login_image__17AS3\",\"formBlock\":\"Login_formBlock__3PU2g\",\"form\":\"Login_form__2WjMT\",\"field\":\"Login_field__2pP2Z\",\"checkboxText\":\"Login_checkboxText__-GgtS\"};","import preloader from \"../../../assets/images/48083.gif\";\r\nimport React from \"react\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\n\r\nexport let Preloader = () => {\r\n    return (\r\n        <div>\r\n            <CircularProgress />\r\n            {/*<img src={preloader}/>*/}\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3qarF\",\"error\":\"FormsControls_error__27-5g\",\"formSummaryError\":\"FormsControls_formSummaryError__wGmD_\",\"captchaImage\":\"FormsControls_captchaImage__2lsmX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header___GKre\",\"loginBlock\":\"header_loginBlock__3C6FY\",\"auth\":\"header_auth__2HniL\",\"btn\":\"header_btn__1wKIi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__3vvOx\",\"posts\":\"MyPosts_posts__1ZTvq\",\"addPost\":\"MyPosts_addPost__3Ysl4\",\"textarea\":\"MyPosts_textarea__2uN3y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2ewGc\",\"avaAndMessage\":\"Post_avaAndMessage__3Buxl\",\"message\":\"Post_message__3eyvK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileGlobalBlock\":\"Profile_profileGlobalBlock__1ZocL\",\"preloaderBlock\":\"Profile_preloaderBlock__S8zoN\",\"profileBlock\":\"Profile_profileBlock__2UUbu\"};"],"sourceRoot":""}