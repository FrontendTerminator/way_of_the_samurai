{"version":3,"sources":["redux/Dialogs-reducer.tsx","redux/Users-reducer.tsx","assets/images/user.jpg","hoc/withAuthRedirect.tsx","components/Profile/MyPosts/Post/Post.module.css","api/api.ts","components/Navbar/Navbar.module.css","reportWebVitals.ts","redux/Profile-reducer.tsx","redux/Sidebar-reducer.tsx","redux/Auth-reducer.tsx","redux/App-reducer.tsx","redux/redux-store.tsx","components/Navbar/Navbar.tsx","components/Navbar/NavbarContainer.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/MyPosts/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/MyPosts/ProfileInfo/ProfileDataForm.tsx","components/Profile/MyPosts/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/header.tsx","components/Header/headerContainer.tsx","components/Login/Login.tsx","hoc/withSuspense.tsx","App.tsx","index.tsx","utils/validators/validators.ts","assets/images/48083.gif","components/Common/Preloader/Preloader.tsx","components/Common/FormsControls/FormsControls.tsx","components/Common/FormsControls/FormsControls.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/ProfileInfo/ProfileInfo.module.css","components/Header/header.module.css"],"names":["initialState","messages","id","message","dialogs","name","ADD_POST_ACTION_CONTAINER","addMessageInStateActionCreator","newMessageBody","type","dialogsReducer","state","action","newMessageCopy","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","follow","userId","unfollow","setCurrentPage","toggleIsFetching","toggleIsFollowingProgress","requestUsers","page","dispatch","a","usersAPI","getUsers","data","items","totalCount","followUnfollowFlow","apiMethod","actionCreator","followUser","bind","unfollowUser","unFollowUser","usersReducer","map","u","followed","filter","mapStateToPropsForRedirect","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","instance","axios","create","baseURL","withCredentials","headers","get","then","response","post","resultCode","delete","getProfile","profileAPI","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","authAPI","login","email","password","rememberMe","captcha","logout","securityAPI","getCaptchaUrl","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","posts","likesCount","profile","newPostText","setStatus","profileReducer","newPost","p","postId","photos","friends","sidebarReducer","captchaUrl","setAuthUserData","payload","getCaptchaUrlSuccess","getAuthUserData","url","authReducer","INITIALIZED_SUCCESS","initialized","reducers","combineReducers","profilePage","dialogsPage","sidebar","usersPage","form","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Navbar","className","s","nav","item","activeClassName","activeLink","href","friend","src","NavbarContainer","Post","likes","MyPosts","React","memo","console","log","postsElements","postBlock","MyPostsFormRedux","onSubmit","value","addPost","maxLength10","maxLengthCreator","reduxForm","handleSubmit","Field","component","Textarea","textarea","placeholder","validate","required","MyPostsContainer","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","useEffect","onDoubleClick","onChange","e","currentTarget","autoFocus","onBlur","ProfileDataForm","onClick","lookingForAJob","lookingForAJobDescription","ProfileData","isOwner","goToEditMode","fullName","aboutMe","Object","keys","contacts","key","contactTitle","contactValue","Contact","contact","ProfileInfo","Preloader","descriptionBlock","large","userPhoto","mainPhoto","target","files","length","Profile","ProfileContainer","this","match","params","String","authorisedUserId","history","push","getUserProfile","refreshProfile","prevProps","prevState","snapshot","alert","file","withRouter","Header","header","loginBlock","HeaderContainer","LoginReduxForm","Input","style","captchaImage","error","formSummaryError","stopSubmit","_error","validCaptcha","WithSuspense","Suspense","fallback","DialogsContainer","lazy","UsersContainerContext","App","initializeApp","exact","path","render","ReactDOM","StrictMode","document","getElementById","maxLength","backgroundColor","preloader","FormControl","input","meta","child","hasError","touched","formControl","children"],"mappings":"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","file":"static/js/main.0f11c89b.chunk.js","sourcesContent":["export type MessagesType = {\r\n    id: number\r\n    message: string\r\n}\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type DialogsPageType = {\r\n    messages: Array<MessagesType>\r\n    dialogs: Array<DialogsType>\r\n    //newMessage: string\r\n}\r\n\r\nexport type DialogsReducerActionType =\r\n    ReturnType<typeof addMessageInStateActionCreator>\r\n\r\nlet initialState = {\r\n    messages: [\r\n        {id: 1, message: \"hi\"},\r\n        {id: 2, message: 'How is your it-kamasutra?'},\r\n        {id: 3, message: 'yo'},\r\n        {id: 4, message: 'yo'},\r\n        {id: 5, message: 'yo'},\r\n    ],\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych'},\r\n        {id: 2, name: 'Andrey'},\r\n        {id: 3, name: 'Sveta'},\r\n        {id: 4, name: 'Sasha'},\r\n        {id: 5, name: 'Viktor'},\r\n        {id: 6, name: 'Valera'}\r\n    ]\r\n}\r\n\r\nconst ADD_POST_ACTION_CONTAINER = \"ADD-POST-ACTION-CONTAINER\"\r\n\r\n\r\nconst dialogsReducer = (state: DialogsPageType = initialState, action: DialogsReducerActionType) => {\r\n    switch (action.type) {\r\n        case ADD_POST_ACTION_CONTAINER:\r\n            let newMessageCopy = action.newMessageBody\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 7, message: newMessageCopy}]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addMessageInStateActionCreator = (newMessageBody: string) =>\r\n    ({type: ADD_POST_ACTION_CONTAINER, newMessageBody}) as const\r\n\r\nexport default dialogsReducer;\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../api/api\";\r\n\r\n\r\nexport type UserType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: null\r\n    photos: {\r\n        \"small\": null | string | undefined\r\n        \"large\": null\r\n    }\r\n    status: string\r\n    followed: boolean\r\n}\r\nexport type UsersReducerStateType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nexport type UsersReducerActionType =\r\n    | ReturnType<typeof follow>\r\n    | ReturnType<typeof unfollow>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setUsersTotalCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleIsFollowingProgress>\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET-USERS'\r\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE'\r\nconst SET_TOTAL_USERS_COUNT = \"SET-TOTAL-USERS-COUNT\"\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE-IS-FETCHING\"\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = \"TOGGLE-IS-FOLLOWING-PROGRESS\"\r\n\r\nlet initialState: UsersReducerStateType = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\nconst usersReducer = (state: UsersReducerStateType = initialState, action: UsersReducerActionType) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {...state, users: action.users}\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter((id: number) => id != action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const follow = (userId: number) => ({type: FOLLOW, userId}) as const\r\nexport const unfollow = (userId: number) => ({type: UNFOLLOW, userId}) as const\r\nexport const setUsers = (users: Array<UserType>) => ({type: SET_USERS, users}) as const\r\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage}) as const\r\nexport const setUsersTotalCount = (totalUsersCount: number) => ({type: SET_TOTAL_USERS_COUNT, totalUsersCount}) as const\r\nexport const toggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching}) as const\r\nexport const toggleIsFollowingProgress = (isFetching: boolean, userId: number) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching,\r\n    userId\r\n}) as const\r\n\r\n// THUNKS\r\nexport const requestUsers = (page: number, pageSize: number) => {\r\n    return async (dispatch: Dispatch<UsersReducerActionType>) => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPage(page))\r\n        const data = await usersAPI.getUsers(page, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n        dispatch(setUsersTotalCount(data.totalCount))\r\n    }\r\n}\r\n\r\n/*Вспомогательная функция для двух нижних санок, т.к. в них код дублируется*/\r\nconst followUnfollowFlow = async (dispatch: Dispatch<UsersReducerActionType>, userId: number, apiMethod: any, actionCreator: any) => {\r\n    toggleIsFollowingProgress(true, userId)\r\n    const resultCode = await apiMethod(userId)\r\n    if (resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleIsFollowingProgress(false, userId))\r\n}\r\n\r\nexport const followUser = (userId: number) => (dispatch: Dispatch<UsersReducerActionType>) => {\r\n    followUnfollowFlow(dispatch, userId, usersAPI.followUser.bind(usersAPI), follow)\r\n}\r\n\r\nexport const unfollowUser = (userId: number) => (dispatch: Dispatch<UsersReducerActionType>) => {\r\n    followUnfollowFlow(dispatch, userId, usersAPI.unFollowUser.bind(usersAPI), unfollow)\r\n}\r\n\r\n\r\nexport default usersReducer;","export default __webpack_public_path__ + \"static/media/user.7bb80ebf.jpg\";","import {Redirect} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {StateStoreType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStatePropsTypeForRedirect = {\r\n    isAuth: boolean\r\n}\r\nlet mapStateToPropsForRedirect = (state: StateStoreType): MapStatePropsTypeForRedirect => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStatePropsTypeForRedirect) => {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n\r\n}\r\n\r\n// Создан HOC который даёт контейнерной компоненте в пропсах булевое значение isAuth, которое отвечает за авторизацию.\r\n// если не залогинен на серваке, тогда будет редирект на логин.","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2ewGc\"};","import axios from \"axios\";\r\n\r\nconst instance = axios.create({ // облегчает работу с axios запросами, подставляя автоматически нужные данные\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\", // в строке URL автоматически будет подставляться перед другой частью адреса.\r\n    withCredentials: true, // аргумент который передаётся в запрос для того, чтобы разрешить отправку cookie. Передаётся вторым параметром DELETE и третьим параметром в POST\r\n    headers: {\"API-KEY\": \"5a6ca339-ef7a-4147-8ff1-68b95a39c9e7\"} // ключ для авторизация передаётся в POST и DELETE запросах третьим аргументом в axios запросах. Добавляется в cookie, чтобы сервер понял что ты авторизован и вернул нужные данные\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    followUser(id: number) {\r\n        return instance.post(`follow/${id}`)\r\n            .then(response => {\r\n                return response.data.resultCode\r\n            })\r\n    },\r\n    unFollowUser(id: number) {\r\n        return instance.delete(`follow/${id}`)\r\n            .then(response => {\r\n                return response.data.resultCode\r\n            })\r\n    },\r\n    getProfile(userId: string) {\r\n        return profileAPI.getProfile(userId)\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: string) {\r\n        return instance.get(`profile/` + userId)\r\n    },\r\n    getStatus(userId: string) {\r\n        return instance.get(`profile/status/` + userId)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status`, {status})\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData()\r\n        formData.append(\"image\", photoFile)\r\n        return instance.put(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    auth() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false, captcha: string | null = null) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe, captcha})\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n       return instance.get(\"/security/get-captcha-url\")\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2mfzy\",\"item\":\"Navbar_item__2R_Sa\",\"activeLink\":\"Navbar_activeLink__2SsGP\",\"friends\":\"Navbar_friends__W6GWC\",\"friend\":\"Navbar_friend__q-yo_\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport {Dispatch} from \"redux\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\n\r\ntype PostsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    contacts: {\r\n        facebook: string\r\n        website: null //\r\n        vk: string\r\n        twitter: string\r\n        instagram: string\r\n        youtube: null //\r\n        github: string\r\n        mainLink: null\r\n    },\r\n    lookingForAJob: true,\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\nexport type ProfilePageType = {\r\n    posts: Array<PostsType>\r\n    profile: ProfileType | null\r\n    status: string\r\n    newPostText: string\r\n}\r\nexport type ProfileReducerActionType =\r\n    | ReturnType<typeof addPostActionCreator>\r\n    | ReturnType<typeof setUsersProfile>\r\n    | ReturnType<typeof setStatus>\r\n    | ReturnType<typeof deletePost>\r\n    | ReturnType<typeof savePhotoSuccess>\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: \"Hi, how are you?\", likesCount: 11},\r\n        {id: 2, message: \"It's my first message\", likesCount: 12},\r\n        {id: 3, message: \"Yo!\", likesCount: 12},\r\n        {id: 4, message: \"Dada\", likesCount: 12}\r\n    ],\r\n    profile: null,\r\n    status: \"\",\r\n    newPostText: \"\"\r\n}\r\n\r\nconst profileReducer = (state: ProfilePageType = initialState, action: ProfileReducerActionType): ProfilePageType => {\r\n    switch (action.type) {\r\n        case \"ADD-POST\": {\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: \"\"\r\n            }\r\n        }\r\n        case \"SET-STATUS\": {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case \"SET-USER-PROFILE\": {\r\n            return {...state, profile: action.profile}\r\n        }\r\n        case \"DELETE-POST\":\r\n            return {...state, posts: state.posts.filter(p => p.id !== action.postId)}\r\n        case \"SAVE-PHOTO-SUCCESS\":\r\n            return {\r\n                ...state,\r\n                profile: {\r\n                    ...state.profile,\r\n                    photos: action.photos\r\n                } as ProfileType\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addPostActionCreator = (newPostText: string) => ({type: \"ADD-POST\", newPostText}) as const\r\nexport const setUsersProfile = (profile: ProfileType) => ({type: \"SET-USER-PROFILE\", profile}) as const\r\nexport const setStatus = (status: string) => ({type: \"SET-STATUS\", status}) as const\r\nexport const deletePost = (postId: number) => ({type: \"DELETE-POST\", postId}) as const\r\nexport const savePhotoSuccess = (photos: { small: string, large: string }) => ({\r\n    type: \"SAVE-PHOTO-SUCCESS\",\r\n    photos\r\n}) as const\r\n\r\n// Thunk\r\nexport const getUserProfile = (userId: string) => {\r\n    return async (dispatch: Dispatch<ProfileReducerActionType>) => {\r\n        const response = await usersAPI.getProfile(userId)\r\n        dispatch(setUsersProfile(response.data))\r\n\r\n    }\r\n}\r\nexport const getStatus = (userId: string) => {\r\n    return async (dispatch: Dispatch<ProfileReducerActionType>) => {\r\n        const response = await profileAPI.getStatus(userId)\r\n        dispatch(setStatus(response.data))\r\n    }\r\n}\r\nexport const updateStatus = (status: string) => {\r\n    return async (dispatch: Dispatch<ProfileReducerActionType>) => {\r\n        try {\r\n            const response = await profileAPI.updateStatus(status)\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setStatus(status))\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n}\r\nexport const savePhoto = (file: File) => {\r\n    return async (dispatch: Dispatch<ProfileReducerActionType>) => {\r\n        const response = await profileAPI.savePhoto(file)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(savePhotoSuccess(response.data.data.photos))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default profileReducer;","type FriendsType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type SidebarType = {\r\n    friends: Array<FriendsType>\r\n}\r\n\r\nlet initialState = {\r\n    friends: [\r\n        {id: 1, name: \"Andrew\"},\r\n        {id: 2, name: \"Sasha\"},\r\n        {id: 3, name: \"Sveta\"}\r\n    ]\r\n}\r\n\r\nconst sidebarReducer = (state: SidebarType = initialState, action: any) => {\r\n\r\n    return state\r\n}\r\n\r\n\r\n\r\nexport default sidebarReducer;","import {authAPI, securityAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {FormAction} from \"redux-form\";\r\nimport {StateStoreType} from \"./redux-store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {stopSubmit} from \"redux-form\"\r\n\r\ntype AuthReducerStateType = {\r\n    userId: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\ntype AuthReducerActionType =\r\n    | ReturnType<typeof setAuthUserData>\r\n    | ReturnType<typeof getCaptchaUrlSuccess>\r\n\r\nlet initialState: AuthReducerStateType = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captchaUrl: null\r\n}\r\n\r\nconst authReducer = (state: AuthReducerStateType = initialState, action: AuthReducerActionType): AuthReducerStateType => {\r\n    switch (action.type) {\r\n        case \"SET_USER_DATA\":\r\n        case \"GET-CAPTCHA-URL-SUCCESS\":\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (userId: number | null, email: string | null, login: string | null, isAuth: boolean) =>\r\n    ({type: \"SET_USER_DATA\", payload: {userId, email, login, isAuth}}) as const\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string) => ({\r\n    type: \"GET-CAPTCHA-URL-SUCCESS\",\r\n    payload: {captchaUrl}\r\n}) as const\r\n\r\n\r\nexport const getAuthUserData = () => async (dispatch: Dispatch<AuthReducerActionType>) => {\r\n    let response = await authAPI.auth()\r\n    if (response.data.resultCode === 0) {\r\n        let {id, email, login} = response.data.data\r\n        dispatch(setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): AuthReducerThunkT => {\r\n    return async (dispatch) => {\r\n        let response = await authAPI.login(email, password, rememberMe, captcha)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(getAuthUserData())\r\n        } else {\r\n            if (response.data.resultCode === 10) {\r\n                dispatch(getCaptchaUrl())\r\n            }\r\n            /* action creator из библиотеки redux form для ошибки в введённых данных. Прекращает отправку форм\r\n            первым параметром передаем какую форму мы останавливаем, вторым свойством (email) передаём проблемное поле которое вызвало ошибку\r\n            если я введу неправильный меил то мне подсветит ошибку\r\n            Общая ошибка для всей формы _error. Также есть общая ошибка для не правильно введёных данных, которая задиспачит её в стейт и через пропсы мы потом сможем вывести содержимое это ошибки */\r\n            let message = response.data.messages.length > 0 ? response.data.messages[0] : 'some error'\r\n            let action = stopSubmit(\"login\", {_error: message})\r\n            dispatch(action)\r\n        }\r\n    }\r\n}\r\nexport const getCaptchaUrl = () => {\r\n    return async (dispatch: Dispatch<AuthReducerActionType>) => {\r\n        const response = await securityAPI.getCaptchaUrl()\r\n        const captchaUrl = response.data.url\r\n        dispatch(getCaptchaUrlSuccess(captchaUrl))\r\n    }\r\n}\r\nexport const logout = (): AuthReducerThunkT => {\r\n    return async (dispatch) => {\r\n        let response = await authAPI.logout()\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setAuthUserData(null, null, null, false))\r\n        }\r\n    }\r\n}\r\n\r\nexport default authReducer;\r\n\r\ntype AuthReducerThunkT<ReturnType = void> = ThunkAction<ReturnType, StateStoreType, unknown, AuthReducerActionType | FormAction>;\r\n\r\n/*\r\nда там все просто, первый агршумент, это тип которые санка, ПОТЕНЦИАЛЬНО будет возвращать, второй Состояние\r\nприложения, третий это доп параметры, которые санка принемает, не считая диспатча, а 4-й это все экшены которые\r\nей разрешено диспатчить. Если собрать все экшенны со всего АПП и передать их в типизацию санки, то получишь\r\nуниверсальную типизацию санки для всего АПП\r\n*/","import {getAuthUserData} from \"./Auth-reducer\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {StateStoreType} from \"./redux-store\";\r\n\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED-SUCCESS'\r\n\r\ntype AppReducerStateType = {\r\n    initialized: boolean\r\n}\r\ntype AppReducerActionType = ReturnType<typeof initializedSuccess>\r\n\r\nlet initialState: AppReducerStateType = {\r\n    initialized: false\r\n}\r\n\r\nexport const appReducer = (state: AppReducerStateType = initialState, action: AppReducerActionType): AppReducerStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializedSuccess = () => ({type: INITIALIZED_SUCCESS})\r\n\r\nexport const initializeApp = (): AppReducerThunkType => {\r\n    return (dispatch) => {\r\n        let promise = dispatch(getAuthUserData())\r\n        promise.then(() => {\r\n            dispatch(initializedSuccess())\r\n        })\r\n    }\r\n}\r\n\r\ntype AppReducerThunkType<ReturnType = void> = ThunkAction<ReturnType, StateStoreType, unknown, AppReducerActionType>;\r\n\r\n/*\r\nда там все просто, первый агршумент, это тип которые санка, ПОТЕНЦИАЛЬНО будет возвращать, второй Состояние\r\nприложения, третий это доп параметры, которые санка принемает, не считая диспатча, а 4-й это все экшены которые\r\nей разрешено диспатчить. Если собрать все экшенны со всего АПП и передать их в типизацию санки, то получишь\r\nуниверсальную типизацию санки для всего АПП\r\n*/\r\n\r\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./Profile-reducer\";\r\nimport dialogsReducer from \"./Dialogs-reducer\";\r\nimport sidebarReducer from \"./Sidebar-reducer\";\r\nimport usersReducer from \"./Users-reducer\";\r\nimport authReducer from \"./Auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\"; // yarn add redux-thunk по дефолту импортирует thunk, а не (thunkMiddleware). Передаём вторым параметром в createStore, чтобы стор смог обрабатывать thunks.\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport {appReducer} from \"./App-reducer\";\r\n\r\nexport type StateStoreType = ReturnType<typeof reducers> // тип стейта\r\n\r\nexport type StoreType = typeof store // типизация всего стора\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n})\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n//export let store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from \"./Navbar.module.css\";\r\n\r\ntype FriendsType = {\r\n    id: number\r\n    name: string\r\n}\r\ntype friendsType = {\r\n    friends: Array<FriendsType>\r\n}\r\ntype NavbarType = {\r\n    sidebar: friendsType\r\n}\r\n\r\nconst Navbar: React.FC<NavbarType> = (props) => {\r\n\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a href=\"/news\">News</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a href=\"/music\">Music</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a href=\"/settings\">Settings</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a href=\"/friends\">Friends</a>\r\n                <div className={s.friends}>\r\n                    <div className={s.friend}>\r\n                        <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS_iEXq5Tq8suPbnZd51iuXk2m7Q64Zide5WA&usqp=CAU\"/>\r\n                        <br/>\r\n                        {props.sidebar.friends[0].name}\r\n                    </div>\r\n                    <div className={s.friend}>\r\n                        <img src=\"https://i.pinimg.com/originals/0c/a9/e2/0ca9e28dcb12dc698cfd2beda6d6fa64.jpg\"/>\r\n                        <br/>\r\n                        {props.sidebar.friends[1].name}\r\n                    </div>\r\n                    <div className={s.friend}>\r\n                        <img src=\"https://klike.net/uploads/posts/2019-03/1551511784_4.jpg\"/>\r\n                        <br/>\r\n                        {props.sidebar.friends[2].name}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React, {Dispatch} from \"react\";\r\nimport Navbar from \"./Navbar\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateStoreType} from \"../../redux/redux-store\";\r\n\r\n// const NavbarContainer: React.FC<NavbarType> = (props) => {\r\n//\r\n//     return <StoreContext.Consumer>\r\n//         {(store) => {\r\n//             let state = store.getState().sidebar\r\n//\r\n//             return <Navbar sidebar={state}/>\r\n//         }}\r\n//     </StoreContext.Consumer>\r\n// }\r\n//\r\n// export default NavbarContainer;\r\n\r\nlet mapStateToProps = (state: StateStoreType) => {\r\n    return {\r\n        sidebar: state.sidebar\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch<any>) => {\r\n    return {\r\n\r\n    }\r\n}\r\n\r\nexport const NavbarContainer = connect(mapStateToProps, mapDispatchToProps)(Navbar)","import React from \"react\";\r\nimport s from \"./Post.module.css\";\r\n\r\ntype PostType = {\r\n    message: string\r\n    likes: number\r\n}\r\n\r\nconst Post: React.FC<PostType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSOfqBBnGW-ntm2BhRJQQJupmw5Gh5drIDnvA&usqp=CAU\"/>\r\n            { props.message }\r\n            <div>\r\n                <span>like {props.likes}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\n\r\ntype PostsArrayType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\nexport type MyPostsType = {\r\n    posts: Array<PostsArrayType>\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MyPostsType> = React.memo((props) => {\r\n    console.log('post')\r\n\r\n    let postsElements =\r\n        props.posts.map((p: PostsArrayType) => <Post message={p.message} likes={p.likesCount}/>)\r\n\r\n    const addPost = (value: MyPostsFormType) => {\r\n        props.addPost(value.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postBlock}>\r\n            <h3>My post</h3>\r\n            <div>\r\n                <MyPostsFormRedux onSubmit={addPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default MyPosts;\r\n\r\ntype MyPostsFormType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostsForm: React.FC<InjectedFormProps<MyPostsFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea}\r\n                   className={s.textarea}\r\n                   name={\"newPostText\"}\r\n                   placeholder={\"new post\"}\r\n                   validate={[required, maxLength10]}\r\n            />\r\n            <div>\r\n                <button className={s.addPost}>add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst MyPostsFormRedux = reduxForm<MyPostsFormType>({form: \"ProfileAddPostForm\"})(AddNewPostsForm)","import React, {Dispatch} from \"react\";\r\nimport {\r\n    addPostActionCreator,\r\n    ProfileReducerActionType,\r\n} from \"../../../redux/Profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateStoreType} from \"../../../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state: StateStoreType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch<ProfileReducerActionType>) => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\n","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport s from \"./ProfileInfo.module.css\"\r\n\r\ntype ProfileInfoType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks: React.FC<ProfileInfoType> = (props) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n               <b>Status: </b> <span onDoubleClick={activateEditMode}>{props.status || '-----'}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input\r\n                    onChange={onStatusChange}\r\n                    autoFocus={true}\r\n                    onBlur={deactivateEditMode}\r\n                    value={status}\r\n                />\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}","import {ProfileType} from \"../../../../redux/Profile-reducer\";\r\nimport React from \"react\";\r\nimport {Field} from \"redux-form\";\r\n\r\ntype ProfileDataFormPropsType = {\r\n    profile: ProfileType\r\n    //goToEditMode: any // fix\r\n}\r\nexport const ProfileDataForm = (props: ProfileDataFormPropsType) => {\r\n    return <form>\r\n        <div><button onClick={()=>{}}>save</button></div>\r\n        <div>\r\n            <b>Full name</b>: {<div>\r\n            {/*<Field placeholder={} name={} />*/}\r\n            </div>}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {props.profile?.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        {props.profile?.lookingForAJob &&\r\n        <div>\r\n            <b>My professional skills</b>: {props.profile?.lookingForAJobDescription}\r\n        </div>\r\n        }\r\n    </form>\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport {ProfileType} from \"../../../../redux/Profile-reducer\";\r\nimport {Preloader} from \"../../../Common/Preloader/Preloader\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"./../../../../assets/images/user.jpg\"\r\nimport {ProfileDataForm} from \"./ProfileDataForm\";\r\n\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoType> = (props) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.large || userPhoto} className={s.mainPhoto}/>\r\n                {props.isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n                <ProfileStatusWithHooks\r\n                    status={props.status}\r\n                    updateStatus={props.updateStatus}\r\n                />\r\n                {editMode\r\n                    ? <ProfileDataForm profile={props.profile}/>\r\n                    : <ProfileData goToEditMode={()=> setEditMode(true)} profile={props.profile} isOwner={props.isOwner}/>\r\n                }\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: any // FIX\r\n}\r\nexport const ProfileData = (props: ProfileDataPropsType) => {\r\n    return <div>\r\n        {props.isOwner && <div><button onClick={props.goToEditMode}>edit</button></div>}\r\n        <div>\r\n            <b>Full name</b>: {props.profile?.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {props.profile?.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        {props.profile?.lookingForAJob &&\r\n        <div>\r\n            <b>My professional skills</b>: {props.profile?.lookingForAJobDescription}\r\n        </div>\r\n        }\r\n\r\n        <div>\r\n            <b>About me</b>: {props.profile?.aboutMe}\r\n        </div>\r\n        <div>\r\n\r\n            <b>Contacts</b>: {\r\n            // @ts-ignore\r\n            Object.keys(props.profile?.contacts).map(key => {\r\n                // @ts-ignore\r\n                return <Contact key={key} contactTitle={key} contactValue={props.profile?.contacts[key]}/>\r\n            })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: any\r\n}\r\n\r\nexport const Contact = (props: ContactPropsType) => {\r\n    return <div className={s.contact}><b>{props.contactTitle}</b>: {props.contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport ProfileInfo from \"./MyPosts/ProfileInfo/ProfileInfo\";\r\nimport {ProfileType} from \"../../redux/Profile-reducer\";\r\n\r\n\r\ntype ProfileComponentType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n}\r\n\r\nconst Profile: React.FC<ProfileComponentType> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         isOwner={props.isOwner}\r\n                         savePhoto={props.savePhoto}\r\n            />\r\n            <MyPostsContainer\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, ProfileType, savePhoto, updateStatus} from \"../../redux/Profile-reducer\";\r\nimport {StateStoreType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorisedUserId: number | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n}\r\ntype PathParamsType = { // типизация параметра для withRouter - RouteComponentProps<PathParamsType>\r\n    userId: string\r\n}\r\ntype ProfileContainerType = RouteComponentProps<PathParamsType> & MapDispatchPropsType & MapStatePropsType\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerType, ProfileType> {\r\n\r\n    refreshProfile() {\r\n// если у нас нет айди, когда мы просто перешли в profile по пути /profile тогда говорим что бы айди по умолчанию было authorisedUserId\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = String(this.props.authorisedUserId)\r\n            if (!userId) {\r\n                debugger\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: StateStoreType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorisedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n/*// custom Hoc from folder hoc\r\nlet AuthRedirectComponent = withAuthRedirect(ProfileContainer)\r\n\r\n// функция withRouter создаёт контейнер и передаёт через пропсы данные из url\r\nlet WithUrlDataContainerComponent = withRouter(AuthRedirectComponent)\r\n// контейнер для redux, который получает также инфу по URL\r\nexport default connect(mapStateToProps, {profileThunk: getUserProfile})(WithUrlDataContainerComponent)*/\r\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from \"./header.module.css\";\r\n\r\ntype HeaderTypePropsType = {\r\n    login: string | null\r\n    isAuth: boolean\r\n    logout: () => void\r\n}\r\n\r\nconst Header: React.FC<HeaderTypePropsType> = (props) => {\r\n    return <header className={s.header}>\r\n        {/*<img*/}\r\n        {/*    src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR-LsQsFeofHHKzAKKv_gJpQrz8NC_O3yQkdQ&usqp=CAU\"*/}\r\n        {/*    />*/}\r\n\r\n\r\n        <div className={s.loginBlock}>\r\n            {props.isAuth\r\n                ? <div>{props.login} - <button onClick={props.logout}>Log out</button></div>\r\n                : <NavLink to={'/login'}>Login</NavLink>}\r\n        </div>\r\n    </header>\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport Header from \"./header\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateStoreType} from \"../../redux/redux-store\";\r\nimport {logout} from \"../../redux/Auth-reducer\";\r\n\r\ntype HeaderContainerType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logout: () => void\r\n}\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerType, unknown> {\r\n\r\n    render() {\r\n        return (\r\n            <Header {...this.props}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst MapStateToProps = (state: StateStoreType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\nexport default connect(MapStateToProps, {logout})(HeaderContainer)\r\n","import React from 'react'\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../Common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/Auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {StateStoreType} from \"../../redux/redux-store\";\r\nimport style from './../Common/FormsControls/FormsControls.module.css'\r\n\r\ntype TypeCaptcha = {\r\n    captchaUrl: string\r\n}\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\nexport const LoginForm: React.FC<InjectedFormProps<FormDataType, TypeCaptcha> & TypeCaptcha> = (props) => {\r\n\r\n    return (\r\n        /* handleSubmit функция из библиотеки form */\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {/* Field контейнерная компонента из redux-form */}\r\n                <Field placeholder={\"Email\"} name={\"email\"}\r\n                       validate={[required]}\r\n                       component={Input}/>\r\n            </div>\r\n            <div>\r\n                <Field placeholder={\"Password\"} name={\"password\"} type={'password'}\r\n                       validate={[required]}\r\n                       component={Input}/>\r\n            </div>\r\n            <div>\r\n                <Field type={\"checkbox\"} name={\"rememberMe\"} component={Input}/> remember me\r\n            </div>\r\n\r\n            { props.captchaUrl  && <div><img className={style.captchaImage} src={props.captchaUrl}/></div> }\r\n            { props.captchaUrl && <Field component={\"input\"}\r\n                                      placeholder={\"anti bot symbols\"}\r\n                                      validate={[required]}\r\n                                      name={\"captcha\"}/> }\r\n\r\n            {props.error && <div className={style.formSummaryError}>\r\n                {props.error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n// HOC reduxForm()() вначале настраивает, а потом вызывает hoc\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType, TypeCaptcha>({\r\n    // каждая форма должна иметь уникальное имя\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\ntype LoginPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n    isAuth: boolean\r\n    captcha: string | null\r\n}\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n\r\n    let validCaptcha = \"\"\r\n    if (props.captcha !== null) {\r\n        validCaptcha = props.captcha\r\n    }\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if (props.isAuth) {return <Redirect to={'/profile'}/>}\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={validCaptcha}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: StateStoreType) => {\r\n    return {\r\n        captcha: state.auth.captchaUrl,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {login})(Login)","import React from \"react\"\r\nimport {Preloader} from \"../components/Common/Preloader/Preloader\";\r\n\r\nexport const WithSuspense = (Component: any) => {\r\n    return (props: any) => <React.Suspense fallback={<Preloader/>}>\r\n        <Component {...props}/>\r\n    </React.Suspense>\r\n}","import React from 'react';\nimport './App.css';\nimport {Redirect, Route, Switch} from \"react-router-dom\";\n/* import {DialogsContainer} from \"./components/Dialogs/DialogsContainer\";\nimport {UsersContainerContext} from \"./components/Users/UsersContainer\"; */\nimport {NavbarContainer} from \"./components/Navbar/NavbarContainer\";\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\nimport HeaderContainer from \"./components/Header/headerContainer\";\nimport Login from \"./components/Login/Login\";\nimport {connect} from \"react-redux\";\nimport {initializeApp} from \"./redux/App-reducer\";\nimport {StateStoreType} from \"./redux/redux-store\";\nimport {Preloader} from \"./components/Common/Preloader/Preloader\";\nimport {WithSuspense} from \"./hoc/withSuspense\";\n\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'))\nconst UsersContainerContext = React.lazy(() => import(\"./components/Users/UsersContainer\"))\n\ntype AppPropsType = {\n    initializeApp: () => void\n    initialized: boolean\n}\n\nclass App extends React.Component<AppPropsType, unknown> {\n\n    componentDidMount() {\n        this.props.initializeApp()\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n\n        return (\n            <div className={\"app-wrapper\"}>\n                <HeaderContainer/>\n                <NavbarContainer/>\n                <div className={\"app-wrapper-content\"}>\n                    <Switch>\n                        <Route exact path={\"/\"}\n                               render={() => <Redirect to={\"/profile\"}/>}/>\n                        {/*в пути пишем, чтобы он отображал params (userId), параметр для withRouters, если пути совпадут. Тут мы говорим : по айди и стамив ? - который говорит что id не обязателен*/}\n                        <Route path=\"/Profile/:userId?\"\n                               render={() => <ProfileContainer/>}/>\n                        <Route path=\"/dialogs\"\n                               render={WithSuspense(DialogsContainer)}/>\n                        <Route path={\"/users\"}\n                               render={WithSuspense(UsersContainerContext)}/>\n                        <Route path={\"/login\"}\n                               render={() => <Login/>}/>\n                        <Route path={\"*\"}\n                               render={() => <div>404 NOT FOUND</div>}/>\n                    </Switch>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: StateStoreType) => {\n    return {\n        initialized: state.app.initialized\n    }\n}\n\nexport default connect(mapStateToProps, {initializeApp})(App);\n\n","import React from 'react';\nimport reportWebVitals from './reportWebVitals';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {store} from \"./redux/redux-store\";\nimport {Provider} from \"react-redux\";\nimport App from \"./App\";\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const required = (value: any) => {\r\n    if (value) return undefined\r\n\r\n    return \"Field is required\"\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: any) => (value: any) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n\r\n    return undefined\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/48083.580d396f.gif\";","import preloader from \"../../../assets/images/48083.gif\";\r\nimport React from \"react\";\r\n\r\nexport let Preloader = () => {\r\n    return (\r\n        <div style={{backgroundColor: \"yellow\"}}>\r\n            <img src={preloader}/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport style from './FormsControls.module.css'\r\n\r\nexport const FormControl: React.FC = ({input, meta, child, ...props}: any) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={style.formControl + \" \" + (hasError ? style.error : \"\")}>\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps} ></textarea></FormControl>\r\n}\r\n\r\nexport const Input: React.FC = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps} ></input></FormControl>\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3qarF\",\"error\":\"FormsControls_error__27-5g\",\"formSummaryError\":\"FormsControls_formSummaryError__wGmD_\",\"captchaImage\":\"FormsControls_captchaImage__2lsmX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__2w908\",\"posts\":\"MyPosts_posts__DW_nb\",\"addPost\":\"MyPosts_addPost__2DXeo\",\"textarea\":\"MyPosts_textarea__ivygP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2EggT\",\"contact\":\"ProfileInfo_contact__3K4Dg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__2Hd6w\",\"loginBlock\":\"header_loginBlock__OYJOc\"};"],"sourceRoot":""}